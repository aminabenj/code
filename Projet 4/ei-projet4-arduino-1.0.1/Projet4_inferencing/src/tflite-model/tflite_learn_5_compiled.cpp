/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.11.2023 18:48:51

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 34448;
#else
constexpr int kTensorArenaSize = 33424;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,28,28,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0035480661317706108, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1372, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[5] = { 161, -1116, -485, -649, 1894, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<1, float> quant2_scale = { 1, { 8.069350769801531e-06, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[5*1372] = { 
  31, -6, -29, 30, -33, 12, 26, -44, 29, 9, 14, -27, -44, 39, -18, -44, 19, -6, 31, 12, 26, -22, 12, -22, -27, -40, -20, -16, -18, 16, -36, -2, 20, 23, 17, -38, 3, -48, 10, 19, 15, 43, 14, 20, 14, 40, 44, -38, -4, -3, -11, -10, -37, 53, -6, -7, 53, -21, -22, 40, -30, 54, -22, -30, -43, -17, -6, 31, -21, -43, -20, 25, 44, -36, -41, 8, -42, -27, -38, -18, -2, -9, -24, -30, 1, -12, 6, 45, 50, -26, 45, -49, 14, 5, -32, -9, 40, 14, 20, 11, 6, -38, -12, 9, -33, 11, 34, 3, 54, -18, -11, 35, -10, -31, 30, 30, -7, 32, 60, -14, -11, 25, 38, -34, -21, 48, -23, -37, -39, 9, 24, -3, 3, 33, 64, 10, 34, 8, 23, -29, 10, 9, -29, 36, -1, 54, 55, -35, 18, -37, -20, 25, 6, 15, -25, -51, -35, 39, 32, 23, -33, -36, -1, -44, 56, -3, -20, -31, -39, -9, -1, 34, -2, 29, 21, -26, -10, 24, -17, 27, -4, 50, 36, -36, -23, 36, 9, 41, 17, -34, -35, -43, 49, 35, 51, 36, -27, 12, -8, -38, -23, -11, 27, 46, -29, -14, 42, -15, 31, -45, 28, 53, 52, -29, 17, -16, -5, -31, -29, -34, -29, -24, 25, -38, -34, 24, -15, -43, -22, 52, 14, -10, 14, -16, -16, -7, 6, -20, 41, 51, 56, 21, -57, -56, -27, 36, -59, -40, 43, 31, 19, -41, -49, 31, 2, 27, 99, 12, 43, -65, 41, -35, 48, -43, 9, 27, 8, -10, 0, -18, -33, 17, -28, -32, 38, 28, -22, 35, -24, -26, 26, 11, -39, -49, 73, -32, -30, -11, 38, 1, -43, -53, 18, -6, 29, -14, 0, -9, -31, -33, 35, 14, -26, -35, 7, -26, 46, -10, 33, -17, -3, -57, 24, 18, -41, -14, 52, -26, -25, 39, -15, 39, 2, 41, -2, -58, 7, -6, -44, 15, -34, -21, 52, 38, 3, -46, -67, -19, -54, -4, -9, 14, -23, -23, 26, 10, 33, 26, 56, 30, -3, 12, -18, 13, -4, 43, 37, -55, 4, -7, 38, 34, 56, -37, 5, 12, -14, -1, 0, -44, -50, -56, 40, -8, -16, 56, 9, 49, 26, 8, 10, -19, -24, -14, 4, -32, -44, 54, -28, 71, -1, -33, -14, 12, 64, 58, -9, 35, 3, -32, 1, 66, 16, 28, 76, 21, 17, -42, -13, 24, 8, -2, 48, 52, 8, -38, -48, -1, -5, -26, -33, 32, 3, 17, 35, 36, -15, 52, 68, -30, -45, 70, -1, 36, -2, -51, 69, 33, -1, -8, -20, -51, -34, 0, 6, -7, 47, 27, -90, -81, 20, -11, 61, -22, 16, -64, 28, -14, -37, 34, 65, -10, -48, -31, 93, -52, 79, -17, -18, -67, 6, -9, -28, 91, -35, -48, -16, -88, -66, -64, 33, 31, -50, 15, -19, -23, -18, 49, 13, 8, -78, 6, 53, 15, 7, -74, 25, -33, -22, 40, -79, 42, 10, -76, -23, -47, 9, -64, 38, -57, -27, -55, 16, -71, -17, 13, 23, -64, 1, 34, 18, -41, 25, 28, -27, -30, -38, -14, -30, 86, -15, 6, 40, 45, 75, 53, -39, 6, 15, 44, -16, 47, -50, 62, 89, 31, 9, 40, 39, 29, 44, 30, 73, 24, 18, 57, 11, 47, -29, 53, 20, 38, 73, 16, 31, 53, -54, -40, 12, 36, -55, 61, 69, 23, 22, 23, 49, 8, 95, 5, 36, -38, -30, 64, 14, 33, 57, 44, -13, 69, 3, 4, -97, 52, 46, 28, -41, 64, 74, 20, 39, -13, 31, 51, 2, 56, -45, -11, 7, 41, -47, -13, 38, 49, -31, 6, -22, 54, -17, 16, 1, -35, -18, 5, -92, -2, 33, 1, 9, 49, -8, 11, -71, -34, -21, 65, -56, 38, 47, -56, 22, -61, 12, -4, 19, 25, 50, 50, -46, 3, 45, 40, 17, 6, -20, -11, 30, 25, 60, 8, 1, -28, 5, 57, 32, -14, -34, 19, -40, -27, -30, 46, -52, -31, -14, 38, -53, -63, -21, 45, -8, 38, 21, -14, -7, -61, 36, 28, -25, 7, 0, -53, -20, 16, -28, -27, 37, 31, 31, 44, 4, 80, 18, -13, -78, -33, -30, 59, 48, 76, 52, -29, 21, 22, 20, 15, -109, 22, -7, -23, -24, 27, 10, 8, 18, -3, -18, -13, -18, 40, 22, 41, -12, 13, 61, 4, -73, 16, 39, -64, 5, -41, 25, 50, -22, 25, -12, 38, -62, 77, 22, -48, -31, -41, -36, -13, -1, 48, 76, 64, 19, 11, -15, -29, -25, 63, 1, 18, 21, 1, 7, 51, -59, 22, -52, 40, 41, 12, 16, 31, 9, -67, 25, 52, 32, -28, -34, -12, 26, -39, 19, 14, 38, 45, 57, -63, -15, -29, 13, 16, -38, -38, -52, 53, -55, 68, -33, 2, 42, -14, 28, 5, -6, 50, -63, 29, -14, 28, 26, 17, -57, 0, 2, -75, -67, -29, 6, 13, -28, -24, -106, 16, 22, -6, 67, 2, -22, -81, 23, 1, -30, -33, -60, -68, 73, -20, 26, 24, -13, -15, 13, -12, -5, 11, -42, 45, -37, -22, -57, 40, -46, 29, 0, -46, 20, -7, 54, -25, -61, -69, -38, 6, 40, 27, -38, -62, -3, -43, -41, -48, -24, -40, 8, -25, 49, -39, -41, -74, 30, -18, 41, -37, -67, 12, 65, 1, 15, -13, -90, -48, 33, 41, -41, -44, -24, -71, -12, 21, 50, 3, 28, 17, -4, -27, -67, -62, 50, -5, -8, 3, 30, 43, 40, -22, 20, -41, -45, -57, 67, 54, 44, 29, 37, 18, -6, -34, 44, 51, 41, -51, 22, 8, -53, -19, 19, -52, -26, -55, 5, -36, 35, -25, -32, 55, -22, 32, 4, -33, 10, 14, 24, -35, 52, -14, -25, 47, -32, 5, -15, -53, -76, -29, -29, 21, 46, -15, 35, -32, 41, 25, 32, 14, -33, -50, -14, 65, -23, -18, 14, -52, 12, 2, 58, -42, -54, 32, -8, -47, -8, 15, 58, 24, 14, 35, -38, -7, 12, 18, -59, -27, -4, -15, 90, 29, -58, 28, -13, -38, -40, 24, 44, 46, -51, -11, 76, -21, -13, -13, 25, 19, -24, 0, -44, 52, 12, 28, -12, -29, -27, -15, 4, -8, -34, -63, 49, 22, -14, 42, 44, -56, -31, -46, 97, 47, 36, -57, -12, -22, -46, 1, 25, 63, -23, -60, -68, -10, -30, -12, -54, 27, -18, -60, 20, 46, -28, 57, 72, -13, -23, -18, 44, -30, 30, -31, -5, -69, 23, 36, -52, 68, -45, -52, 0, 42, 37, 12, -51, 28, -24, 45, 36, 55, -16, 82, 85, -12, -57, 13, -6, 47, 1, -10, 18, -7, 34, -10, 41, 61, 4, 20, -19, 3, 26, 44, 54, 51, 24, 30, 54, -31, -8, 14, 82, 40, -40, 34, 22, -21, 15, 0, -13, 26, -18, 22, -20, 51, 25, -48, 10, 3, 19, -2, -19, -39, 35, 4, -9, -25, 29, 43, 8, 14, -40, 5, 7, 26, 11, -22, 71, 29, 2, -6, -22, 59, -13, -49, 32, -42, -5, -46, 42, -20, 9, -38, 0, 47, 5, 68, -30, 42, -21, 9, 83, -44, 50, -24, 26, -47, 32, -37, -52, 38, -41, 42, -9, 8, -19, -27, 32, -5, 35, 47, 35, -30, -31, 74, 71, -49, 38, 21, 55, 21, 17, 38, -39, -43, 27, 16, -28, 59, -14, -6, 8, -43, -20, -45, -1, -7, -40, -13, -23, -19, -15, 41, 58, -47, 13, 33, 66, 30, 27, 34, 4, 21, -39, 40, -14, -18, 24, 15, -39, -26, -23, -30, 4, -19, -10, -12, 67, -30, -20, 39, 31, 25, 25, -46, 79, -12, 36, 6, -20, 1, -47, 50, 24, 7, -23, -23, -41, -21, 40, -48, 24, 3, 33, 52, -7, 60, 34, -36, -32, -48, -49, 20, -25, -48, 64, -34, 13, -9, -47, 19, -39, -19, -11, 47, 3, -22, -30, 21, -47, 33, 4, -48, -22, 36, -37, 60, -19, -9, 19, 6, 1, -6, -17, -46, -46, 30, -7, 49, -28, 61, 29, -3, -9, -18, 51, 5, 20, 29, -25, -1, 26, 22, -54, 18, 3, -19, -30, 13, -12, -20, 14, -51, 39, -42, 40, 26, 24, 43, 0, 9, 
  23, 33, -13, 3, -51, 43, -15, 18, 31, 27, -61, 0, 19, 35, -46, -3, -55, 21, 22, -1, -11, -47, -48, 34, -1, 19, 29, -43, -35, -9, -23, -6, -48, -26, -47, 35, 20, -15, 4, 28, 38, -12, 33, -46, -26, 38, 12, -44, -40, 34, -42, 21, -4, -7, -33, 10, 13, -5, -27, -7, -46, -29, 4, -33, -3, -38, -35, 7, -43, 30, 3, 47, -21, 16, -40, -9, -39, 5, -33, 47, -18, -53, -54, -44, 33, -9, -24, 12, 4, 1, -2, -18, 49, 9, -60, -14, -2, -49, 10, -17, -11, 27, -51, 27, -38, -8, -13, 37, -29, -34, 40, 16, -2, 30, -21, 37, -34, -15, -3, 38, -28, 32, -10, -15, 32, -50, -49, 46, 55, -18, 5, -33, -23, 24, -41, 26, 25, -60, 41, 40, -46, 19, 21, -26, -20, -52, -13, -15, 22, 49, 35, 39, -58, -51, -17, 14, -64, 6, 18, 10, 17, -30, 15, -41, 1, -6, -56, -17, 21, -36, -20, 6, 22, -27, 27, -41, -62, -8, -36, 2, -7, 30, 29, 25, 17, -51, -18, -23, -32, 28, 36, 29, 4, 27, -44, 11, 49, 14, -53, 37, -38, 4, 28, -9, -40, 40, 37, -17, 24, 24, 14, -36, -2, 11, -23, 43, -41, 7, -14, 3, 45, 36, 27, 48, 14, -22, 33, 0, -54, -23, 23, 32, -7, -18, -5, -18, 35, -35, -16, 25, -61, -52, 60, -44, 23, -10, -18, 9, 23, 1, -1, 8, -22, 49, -26, 48, -53, -31, 10, 5, 47, -15, -26, -27, 24, -33, -18, -18, -54, -44, -7, 35, 9, -20, 24, -52, 7, -2, 22, 14, -4, 44, -18, -27, -31, -6, 21, 51, -15, -7, 29, -14, -2, -48, -22, -32, -1, 16, 7, -43, 63, 48, -1, -35, -33, 9, 32, -42, 54, 9, 39, -32, -93, 20, -11, 15, 11, 30, 7, 48, -10, 30, -17, -29, 28, 28, -29, 14, 55, -1, 12, -26, 31, -13, 29, -30, 44, -21, 8, 49, -22, -10, -27, 55, -15, -24, -30, -19, -53, 29, -6, -42, 8, 49, 47, 5, -54, -3, 4, -55, 45, -28, -75, 22, 46, -28, 44, 5, -14, -52, 3, 64, -78, -37, 40, -1, -41, -9, -8, -53, 1, -7, -19, 6, 32, -39, 13, -35, 13, -67, -44, -9, -22, -43, -9, 17, 45, 1, 6, 29, 10, -38, 25, 27, -42, -27, -8, 25, -1, 24, 17, -46, -41, -59, 26, -25, -1, -31, 4, -14, -33, -41, -56, -7, -1, 31, -19, 12, 16, -65, -46, 8, -52, -20, -9, 32, 33, -5, -56, -10, 28, -1, -41, 31, 26, -34, 22, -12, -13, -40, -7, -32, 57, -32, 16, 29, 52, -43, 51, -41, -14, 49, 23, -48, 12, 14, -61, 46, 43, 2, 48, 12, -19, -42, 25, 8, 68, 30, -32, -17, -32, 23, 57, -11, -5, -15, 40, -36, -41, 20, 7, -35, -88, 12, -58, 48, -11, -13, 7, 6, 72, -52, -42, -3, 22, 53, 9, 40, 36, -13, 18, -20, -38, -34, 32, -6, 8, -41, 10, 49, -2, -25, -62, 6, 31, 17, -32, -42, 56, -64, -31, -13, 36, -14, -58, 11, -34, 21, 49, 26, 24, -38, -11, -73, -56, 36, 8, -43, -4, -50, -23, 5, -49, 71, -26, -17, -42, -78, -45, 5, -34, 20, 31, -20, -64, 38, -15, -3, -62, -20, 7, -75, -78, 18, -20, 28, -14, 22, -53, 52, -59, 10, -13, 23, 60, -82, -4, 14, -8, -75, 27, -60, 61, 23, -3, -21, -56, -66, -20, -45, 28, 39, -28, 27, 4, -20, -60, -25, 39, -77, 22, -2, -65, -54, 20, -60, -83, -34, -81, 4, 80, -29, -54, -4, 29, -61, -58, 46, 4, -30, -78, -54, 12, 3, 27, -77, 60, -57, -37, 29, -61, 88, -33, -63, -67, -9, -1, 22, -6, -19, 33, -59, 17, -88, -49, 99, -6, -25, 11, 26, 35, -53, 50, -57, 9, 18, -19, 22, 6, 53, -7, -73, -6, 40, -46, -17, 39, 61, -40, -52, 47, 17, 20, 65, 21, 41, 0, 7, 38, 58, -29, 26, 4, 8, -7, 20, 45, -19, 25, 18, 13, 3, -13, -39, 68, 23, -8, -8, 41, -14, -41, -33, 32, 42, -39, 19, 30, 46, -55, 26, 19, -16, -8, -22, -30, -1, 11, -62, 36, 30, -32, 6, -24, 51, -10, 48, 43, -11, -36, -24, -34, 52, -14, -23, -48, -34, 14, -4, 24, 48, 10, 1, 30, 6, -9, -57, 38, -1, -31, -40, 65, 34, -30, -19, -55, 3, 7, -10, 17, 11, -10, -4, -53, -34, -51, -25, -13, -29, 19, -16, -13, -30, -15, -29, -60, 9, 59, -5, -69, -35, 7, -3, -20, 47, -72, 36, -7, -50, -21, -17, 74, -30, 44, 19, 8, -22, -44, -15, -39, 26, 39, -58, -21, -21, 42, -25, -1, -21, 36, -28, 43, -8, 26, 72, 25, -40, -37, 12, 9, 53, 29, -13, 48, 1, -37, 45, -19, 116, 48, 36, 5, 50, 24, -41, 27, -24, 8, -5, 68, 18, 0, 22, 77, 26, -9, 2, -23, 48, 52, -53, 59, 16, -34, 18, 17, 44, 6, -9, 35, 3, -9, -15, 57, 25, 25, 47, 68, 73, 21, 18, 34, 11, -6, -23, 58, -6, -20, 13, -44, -37, -13, 54, 54, -7, -29, -22, 13, -19, 15, 35, 19, -33, 45, 19, -21, 14, 16, 14, 37, 53, 33, 1, 33, 45, 14, 41, 40, 10, -15, 31, 39, -25, 49, -38, -23, -24, -19, -19, -41, -45, -31, 21, 23, 44, 34, 61, 12, -33, -44, 38, -20, 50, 30, -52, 0, 23, 39, 40, -13, 22, 30, 28, 11, 42, -34, -4, -8, -15, -31, -50, -31, -17, 32, 8, -34, 30, -27, -14, 4, -41, -24, 8, 34, -40, -47, -27, 28, -11, 22, 17, 16, -32, 12, 12, 16, -7, 15, 41, -50, 33, 18, 6, -33, 32, 17, -12, 37, 28, -28, -8, -41, -44, -43, -40, -34, -7, 41, 23, -38, -18, 24, -44, -38, 13, -45, -50, 11, 30, 43, 14, 27, -47, -6, 19, 0, -35, 55, 9, 7, 28, -29, -3, 27, -4, -38, 37, -16, -25, 36, -21, -30, -5, 7, 18, -31, -13, -40, -78, -33, -33, 23, -34, 0, 1, -4, -14, 23, 10, 46, -52, -4, -48, -19, 5, 61, 44, -10, 55, 45, -22, 57, 49, -56, 28, 45, -47, -60, 31, 4, 32, -53, 3, -7, 20, 4, 38, -27, 45, 29, -19, -2, -5, 14, 4, -28, -44, 51, -32, -13, -7, 32, -34, 27, -43, 17, -18, 42, 24, -13, -11, 6, 43, -5, -30, 31, 20, -13, -56, -30, 5, 33, 42, -32, 4, 7, -12, 26, -43, -5, 28, 19, 39, 1, -42, -11, -26, -5, -47, -34, -10, 30, -30, -10, 29, -16, -22, 10, 38, -34, 22, 17, 39, -16, 6, 23, -8, -20, 10, 2, 20, 31, 40, -15, 21, 41, 49, 15, -15, 5, -12, -16, 23, 7, 8, -36, 42, 5, -5, -24, -44, -1, 40, 16, 15, -58, -32, -22, -25, 19, -5, -18, 28, 40, 35, 34, -31, 43, 7, -20, 23, -28, -60, -27, 33, -11, 18, -56, 26, 50, 34, 39, 2, -4, 30, 7, -75, -53, 30, 17, 0, -20, -41, -46, 3, 30, 34, -1, -25, -27, -2, 36, -26, 0, -37, 4, -2, 20, -8, -16, 14, -12, -5, 26, -22, -72, -47, 28, 49, -62, 31, -59, -18, -51, 16, 7, -38, 50, 14, -35, 47, -12, 7, 3, -18, 40, 25, 16, 10, -1, -13, 26, -66, -85, -26, 43, -21, -51, -42, -21, -41, -23, -47, 33, -22, 48, -34, -48, -50, 23, -45, -36, -41, 14, 15, 27, -37, 31, -43, 5, -12, -51, 5, -53, -38, -35, -33, -12, -13, -4, 26, 36, -15, 48, -66, -11, -38, 15, -3, 24, -19, -27, -30, -17, -6, 39, -35, 23, -6, -10, 41, -4, -22, -58, -50, 32, -24, -46, -22, 39, -63, 14, -35, 59, -3, 18, 35, -59, 17, -28, -44, 27, -30, -9, -36, 25, -50, -24, -41, 0, 12, -13, -34, -65, -48, -26, -7, -28, 1, -49, 21, 22, 37, 
  -49, -14, -33, -50, -45, 23, 44, 2, 9, 4, 46, 6, 34, 1, -50, 53, 45, -37, -5, 31, -57, 27, -53, 27, -9, -51, 35, -1, 19, -4, -12, 1, -8, 8, -9, -59, -5, -33, 9, 30, 9, 29, -35, -6, -50, 0, 22, 31, -42, -16, 47, -60, 24, 38, -54, -26, 26, 9, -21, 18, -8, -49, 3, -29, -2, 38, 12, -47, -16, -55, 1, 22, 32, -46, -43, -34, -60, -30, 7, -48, -16, -25, -46, -2, 35, 22, -30, -43, 13, -16, 39, -21, -7, -24, -17, -30, 15, -23, -16, 15, -33, -6, -10, 14, 39, 13, -35, 19, -43, 33, -5, -37, -57, -5, 17, -20, -28, -25, -41, 37, 22, 2, 35, 12, -24, -62, 40, -11, -48, -45, 35, -14, 41, -35, -58, -14, 42, -8, -34, 43, -26, 42, -47, -5, -8, 23, 34, 6, 32, -24, 16, 40, -26, 12, -41, 53, 37, -9, -56, 40, 22, -9, -10, -13, 0, -47, -47, -47, -43, -9, 5, -52, -54, 1, -38, -42, 1, 32, -56, -31, -44, -42, -54, -23, -55, 25, 13, 2, -38, -33, -60, -28, -19, -46, 29, -50, -1, -43, -21, -36, -8, 29, -41, 35, 22, -9, 30, -45, 15, -19, 12, -9, -32, -26, 48, 23, -31, -60, -6, 35, 28, 0, 33, -33, -18, 23, 8, 37, -40, 22, -41, 5, -7, -29, -24, -9, -21, -11, -41, 37, -52, 35, 1, -16, -11, 4, -22, 11, 4, 49, -52, -8, -1, 11, -37, -54, -41, -31, -28, -21, -59, -21, -20, 44, -10, -54, -3, -2, -13, -3, 60, -31, 18, -28, -23, 7, -8, 1, 32, -48, 54, 2, 46, 49, 8, -39, 42, 34, 32, 17, -44, -3, 5, -38, -19, 6, -29, 27, 8, 18, -42, 4, -49, 37, 17, 49, 4, 1, 30, -28, 54, 18, -54, 0, 23, 28, -32, 41, -49, 22, 35, 5, -13, -16, 15, 46, -4, -31, -49, 23, -55, -7, -54, -4, -11, -5, -15, 33, 12, 0, 7, -29, -28, 12, -41, 55, -2, 26, 12, -27, 9, -48, -59, -53, -28, -35, 21, -20, 16, -41, 15, 28, -74, 34, 5, 8, 46, 27, 22, 31, -12, 28, -43, -62, 28, -48, -5, -29, 22, -30, -13, -38, 24, -2, -49, 29, 26, 4, -54, -69, 16, 19, -32, 31, -5, -39, -24, -7, -18, 47, -14, -54, -48, -51, -8, -9, -14, -38, -70, -18, 40, -33, 8, -44, 37, -45, -57, -24, -44, -39, 10, 49, 54, 6, -34, 3, -6, 23, 7, 50, -38, -52, 23, -58, 21, -2, -13, -41, -1, 28, 32, -25, -13, -33, -7, 33, 34, 31, -4, 66, 54, 46, -74, 3, 2, 30, 4, 63, 8, -62, 15, -43, 55, 12, -28, 4, -10, -17, 16, -6, 37, -23, 24, 37, 38, 66, 58, 42, 47, -18, -89, -47, -2, -1, -42, 81, 19, -60, -56, 1, 57, 14, -44, 4, 78, 17, -29, 3, -34, -1, 15, 50, -14, 65, 77, 81, 30, 54, -54, -1, 18, 10, -32, 75, 43, -43, -10, 5, 67, -40, -61, 34, 81, 43, -47, 72, 29, -6, -25, -38, -25, 32, 49, 71, 65, -14, -105, 2, 0, 11, -49, 47, 24, 4, -26, 42, -13, -41, -71, 34, 41, -32, -46, 11, -20, 23, 31, -68, -27, 47, 22, -28, -8, 15, -66, -20, 27, -11, -12, 32, 29, 20, -55, -42, -50, 56, -59, -27, -50, -45, -8, 24, 36, 19, 12, -62, -34, 34, -23, 32, -30, -15, -10, 26, 51, 50, 3, 59, 24, 31, -55, -54, 20, -36, -41, -24, -36, -28, -52, -31, 9, -14, 29, 39, 48, 18, 86, 72, 60, -28, -70, -33, 55, 25, -37, 71, 59, -44, -86, -45, 64, 28, -87, -32, -30, -19, -22, 50, -3, -7, 52, -65, 26, 16, 39, 68, 9, -1, -68, -36, 38, 22, -93, 45, 100, -104, -70, 51, 39, 15, -55, 9, -50, 80, 45, 42, 34, -2, 10, -2, 41, 8, 37, 39, 81, 81, -32, 65, 42, 89, -7, 98, 83, -78, -41, 67, 32, -41, -95, -5, -18, 34, -49, 94, -40, -48, 10, -9, 13, 17, 101, 101, 1, -2, -66, 54, 101, -2, -24, 59, 98, -51, -127, -17, 72, 50, -77, 57, -25, 79, -48, 89, 25, 6, 46, -29, -41, -9, 28, -7, 13, 5, -25, 51, -9, -27, -102, -21, 17, -60, -80, -1, -21, -31, -21, -34, -52, 12, -41, 22, -9, -26, 57, -105, -86, 29, 11, 29, -22, 13, -53, 48, 53, 5, -12, -5, 13, -92, -16, -54, 17, -40, -50, -10, -16, -26, -42, 45, -31, -62, -1, -60, 7, 62, -32, -7, -61, -39, -60, 16, -12, 44, -30, -22, 8, -34, -75, -27, 32, 20, -66, -3, 0, 25, 0, -6, -44, 15, 51, -40, -48, 0, 60, 33, 4, 9, 0, 0, 32, 16, -71, 42, 69, -108, -88, 10, 0, -1, -115, -51, -85, 49, 28, -12, 25, -24, 22, -26, 22, -19, 31, 43, -50, 11, 27, 33, 16, 27, -102, 16, 31, -67, -89, 58, 14, -11, -108, 6, -54, 35, -43, 17, 29, 1, 37, -94, -31, 22, 97, 0, -84, 20, -44, 74, 70, 17, -84, -5, 46, -89, -122, 0, -4, -14, -119, -38, -83, 53, 8, 85, -13, -30, 10, -50, -36, 37, 76, 44, 9, -7, -48, -1, 38, -39, -114, 48, 60, -88, -55, 29, -2, 9, -96, 40, -24, 48, -62, 79, 73, 4, 45, -72, -30, 41, 46, -33, -32, -19, 29, -30, 64, 41, -91, 48, 5, -78, -102, -28, -19, 30, -41, 6, -20, 30, -68, 59, 50, -40, -10, -57, -76, 28, -29, 28, 13, 5, 25, 24, 33, -22, -92, 41, 55, -35, -90, 13, -20, 48, 26, 23, 10, 19, -63, 50, -43, -19, 49, -40, -17, -33, 44, 29, -3, 10, 13, -36, -12, 0, -15, -19, 13, -41, 43, 24, -44, 6, -78, -54, -12, -12, -48, -39, 43, -52, -51, 38, 18, 57, 42, 24, -68, 26, -18, 14, -27, 14, -16, -61, 35, -81, -17, 40, -13, -3, -91, -52, -31, 35, 0, 1, -49, -38, -26, -55, 34, -33, 29, -25, -55, 3, 52, 52, -19, 50, -19, -59, 34, -33, -106, 53, -28, -4, -39, 30, -72, 54, -62, 9, 2, 4, 18, -36, 50, 24, -32, 38, -39, 8, 17, 56, -10, -26, -17, -5, 3, -92, -91, 54, 32, 5, -30, 30, 8, -28, -11, -10, 23, -2, 28, -102, 9, -32, 53, -14, -4, 5, 28, -43, -49, -15, -60, -9, 54, -104, -36, -19, 24, 47, -107, 7, -61, 7, 16, -30, 1, -26, -26, -92, -61, 28, 3, 33, -41, -11, -17, 36, -40, 5, -4, -19, 55, -93, 3, 47, -31, -1, -76, -61, 1, 44, 25, 11, 6, -38, -45, -96, -14, 15, -11, 2, -37, 35, -48, 15, -19, -14, -45, -11, 48, -71, 23, -51, -19, 18, -36, -47, 17, -45, 27, -6, 45, -43, -9, -26, -26, -17, 22, 33, 23, -23, -36, -42, 7, -54, 43, 6, 49, 14, 17, 34, -52, 7, -33, -39, 40, -51, -17, 30, -21, -28, 27, -45, 40, -6, 16, 17, 26, 49, -11, -7, 13, 31, -36, 36, -40, 12, -13, 48, 14, 6, 25, -5, -56, -21, 35, 13, 16, -7, 18, -1, 37, -21, 24, 11, -18, 24, -47, -10, 36, 46, 14, 46, -47, -37, 24, -23, 7, -25, 6, -35, -33, 1, 44, -18, 4, -56, 49, -38, -30, 52, -51, 45, 26, -19, -47, -31, 1, -47, 11, 40, 15, 9, 6, 34, 13, 13, 18, 30, 3, -35, 46, 9, 57, -29, -9, 28, -49, -47, -39, 20, -27, 7, 23, -51, -17, 50, 25, 23, -42, 3, -24, 37, -51, -12, 19, 21, -34, -20, -23, 39, 17, -47, 2, -48, 42, 10, -47, -37, -4, 36, 23, -27, -32, -28, 48, 30, -37, 8, 7, 34, -40, -32, -36, -43, -18, 20, 24, 25, -26, -39, 37, -10, 7, -33, -61, -20, 15, -33, -40, -20, -10, 12, -21, -60, -45, 5, 28, 34, -40, 2, -36, -9, -49, -6, 26, 36, 34, -17, -7, 25, 2, -24, 
  0, 42, -43, 35, -27, -11, -21, -35, -8, -26, -18, 15, 48, 19, 9, 32, 35, -45, -51, -37, -35, 21, 18, -7, -36, -13, -40, 34, -45, -7, -54, 12, -38, 9, 29, -27, 18, -47, 24, -25, -4, -1, -34, -37, 1, -38, 23, -59, -56, 47, 16, 25, -11, -7, -14, -3, -40, -16, -24, 43, 40, 6, -17, -1, -27, -18, 7, -48, 21, 8, 38, 17, -35, 4, 2, 41, -53, 21, 40, 24, -24, 43, -6, -3, 23, -8, -46, -43, 33, 4, -33, -31, -40, 30, -11, 30, -27, 22, 12, 0, -6, 10, 7, -28, 21, -50, -60, 21, -48, 19, 0, -6, 24, 6, -38, 31, -23, 16, 30, 45, 34, -8, -22, 19, -35, -45, 38, -21, -61, 38, -33, 0, -16, -9, -34, 1, -42, -17, -27, 39, 8, -14, -7, -47, 29, -62, -17, -38, -48, -48, 34, -8, -42, -4, 13, -19, -37, -44, 10, 23, 12, -50, 26, -12, -23, -20, 21, -58, -51, 15, -6, -47, 19, -32, -42, -38, -44, 4, -49, -35, 51, -50, -2, 28, -10, -33, 21, 36, -12, 8, 5, 41, -52, -11, 22, -32, 13, 48, -52, 21, -16, -52, -17, -49, -20, -32, -18, -35, -20, -56, -49, 24, 41, 32, 30, -9, -26, 24, 28, -19, -62, -30, 20, -15, -38, 8, 17, 3, -41, -31, -4, 8, -4, -33, -34, -31, -18, -18, -35, -31, -24, -38, 55, -30, 0, 41, -73, -30, -4, 52, 24, 10, 42, 1, 42, 51, -99, -15, 38, 55, 6, 55, -14, 54, 23, -15, 8, -18, -25, 31, 40, -13, -46, -49, -14, -44, 12, 42, -11, 10, -36, 52, 0, -1, -103, 7, -14, 44, 55, 38, -30, -5, 5, -6, 44, 5, -5, -30, -25, -35, -17, -47, 0, 52, 19, -17, -38, -16, -27, 11, 43, 46, -86, 33, 1, 15, 1, -33, -17, -35, 0, -42, -41, -50, 18, 55, -15, 23, 34, -30, 15, -16, -5, -8, -37, 49, 41, 44, 16, 35, -57, 26, -31, 3, -49, -10, -28, -29, 14, -30, 1, 6, -19, 19, 22, -7, -31, -46, -24, -45, -23, -2, -33, -5, 24, -5, 23, -46, 10, 7, 5, 32, 3, -51, -32, -50, 1, -2, 14, -13, -20, 6, 8, 19, -30, 35, -15, -52, 21, 21, -19, 35, 18, 17, 53, 41, -85, -32, -5, 27, -29, 3, 18, -57, -10, -1, -42, 48, -43, -4, 34, 27, 45, -16, 45, -29, 16, -11, -16, 14, -2, 27, -18, 67, -70, -8, -32, 41, -68, 11, 22, -62, -58, -35, 55, -37, -91, -15, -30, 65, 17, 13, 25, -66, -28, -29, -41, 69, 1, 7, -23, -10, 0, 16, -10, -16, -41, 76, 17, -56, -48, -9, 44, -14, -57, 4, 13, 14, -30, -19, 44, 8, 19, -22, -6, 52, -38, -4, -24, -34, 72, -19, -1, -44, -73, -39, 12, -82, -91, 59, 35, -44, 7, 39, -7, 68, -38, -30, 22, -34, -26, -87, 14, -30, -30, 28, -6, 46, 37, 29, -43, -47, -60, 12, -7, -5, -19, -20, 45, -51, 7, -55, 1, -40, -47, 39, -3, -65, 1, -20, 69, 26, 0, 17, -41, -14, -5, -29, 60, 1, 68, 23, 19, -35, -7, 46, 24, 26, -4, -44, -68, 6, -8, 24, 49, -37, 53, -13, 33, -40, -1, -57, -28, 27, 49, 32, 0, -48, -42, -22, -16, 0, -75, -46, -25, 48, 18, 34, -38, 6, 11, 31, -7, 34, -44, 3, -20, 31, -31, -27, -49, 47, 38, 38, -23, -17, 35, -17, 23, -30, 5, 49, 3, -12, -20, -54, 2, 33, -44, 27, -14, -58, 12, -51, 54, -17, 45, 25, -6, 8, 9, 44, -7, -6, -14, -16, 50, -40, -33, -36, -18, -7, -45, -1, 2, 37, 32, 11, -4, 56, -4, -38, 56, 54, -53, 9, -24, 26, 85, 70, -21, 24, 11, -43, 42, 36, 56, 62, 41, -38, 37, 1, -48, -19, -25, 17, -30, -20, 35, -29, -81, -25, -74, -109, -33, -62, 118, 51, -71, -3, 94, -59, -39, 54, 69, 15, -103, 30, 67, 11, 56, -72, -16, -3, -46, -39, -53, 68, -33, -28, -76, -86, 4, -17, 38, -12, -49, 45, 67, 7, -6, 20, 81, -13, -90, 0, 104, 13, 38, -32, 17, -51, -17, 66, -13, 92, 54, -21, -22, 3, -30, 30, 57, -19, -59, -6, 41, -50, -62, 89, 15, 36, 0, -9, 18, 1, 54, -61, 55, 20, -47, 60, -19, 94, 14, -21, -45, -69, -25, -26, -13, 44, 33, -6, -2, -44, 36, -22, -13, -12, -4, -3, 15, -37, -31, -66, 41, 12, -47, -57, 2, 50, 2, 28, 27, 2, 39, -18, 40, 13, -44, 45, -20, -40, 2, -35, -6, -36, -40, 18, -24, 0, 38, 33, -8, 8, 9, -12, 43, 18, -45, -38, 66, 41, -22, -37, -23, 52, 69, -44, 3, 25, 1, 58, -28, 6, -12, -11, 0, -25, -12, 29, -52, -3, -14, 40, 65, 55, -22, 21, -31, 23, 80, -7, -26, 39, -41, 13, -31, 70, 12, 45, -10, -37, 20, 29, 90, 57, 55, 21, 35, 54, 60, 32, 33, 66, -53, 39, -2, 6, 44, 36, -9, -14, 43, -19, 72, 74, -16, 97, 75, 6, -33, 34, 72, 34, 97, -28, -29, -16, 0, -21, -13, 84, -12, 48, -32, 13, 66, 8, -11, 29, 44, 70, 15, 68, -50, 16, 93, -18, 61, -11, -2, -27, 48, 2, 29, 44, 44, 78, -28, 66, 15, 32, 12, -33, 15, -15, -14, 38, 33, -37, 40, 41, -36, 35, -25, -12, 45, 40, 3, 9, 12, -53, 2, 26, -1, 66, -32, 40, 33, -26, 44, -14, -15, 49, -19, -35, -43, 38, 48, 20, 40, 25, -62, -29, -19, 46, -38, 37, 32, 5, 9, -47, -42, -10, -12, 20, -16, -57, -15, 12, 55, -35, 7, 46, -15, 25, -17, -26, -15, 38, -39, 33, -24, -24, -42, -10, 0, 28, 42, -27, -3, -28, -39, -28, -32, -1, -20, 40, -33, -54, -67, -18, -2, -46, -35, -1, -1, -33, -105, -14, -33, -21, -59, 44, 17, -19, 29, 15, -13, -18, -1, -57, -17, 52, -43, 9, -30, -21, 39, -14, 20, -41, -52, -46, 31, -39, -20, -37, 38, -33, 36, 17, -33, 40, -56, -27, -1, 6, 14, -27, 5, 4, -32, 2, 2, -10, -3, 49, 41, -26, -23, -6, 5, -23, -9, 42, 6, 16, -12, 42, 1, 12, -67, -33, -18, -11, 21, -24, -50, 7, 48, -13, -46, -55, -34, 7, -26, 16, 19, 23, 38, -51, -87, -30, -17, -8, 13, 4, -6, 45, 2, 24, 19, -31, 32, -67, 9, -6, -35, -49, -30, 24, -12, -36, 30, 31, 25, 27, -19, 4, -109, -2, -34, 45, -89, -20, -17, 15, 4, 16, -23, -12, 17, -79, -60, 47, 39, -9, -11, -35, 3, -34, 2, -55, -40, -61, 35, -60, -22, 16, -20, -36, -67, -54, -44, 2, -35, 31, 0, -50, -22, -78, -13, -20, 16, -26, -43, -12, -28, -12, 12, 5, -47, 45, 61, -2, 34, 38, -16, -45, -6, -27, -50, -15, 47, 36, 30, 17, 34, 6, 35, -11, 46, -11, -64, 47, -49, -36, 9, -24, -24, -5, -21, -5, -14, 5, -17, -3, -15, 39, -80, 39, 40, 27, -46, -26, -16, 32, -45, -1, -16, 40, -12, 13, -33, -37, -25, -48, -84, 28, 8, 7, 9, -40, -43, 7, -10, -1, -54, -28, -1, 46, -19, -14, 12, -29, 32, -40, -4, -51, -61, -38, -5, -38, 46, -46, 0, 1, 32, -62, -60, -16, -6, -46, -22, -15, -53, 36, 9, -50, 20, -41, -15, 9, -58, 34, 16, -31, 17, 27, -48, 38, 5, 24, 3, -11, -4, -52, 4, 32, -39, -60, -26, -29, -13, 3, -26, -14, 18, -57, 2, -7, -51, -40, -1, -3, -55, 16, 31, -26, -53, 6, -63, -60, -1, -21, -5, -19, 28, 22, -37, -6, 11, -57, -21, 1, 11, -30, 35, -60, -42, -9, -9, -8, 42, -29, -3, 23, -15, 10, 30, -37, 27, -66, -1, 39, 7, 3, -7, -13, 39, 36, 5, 38, 46, -24, -53, -40, -56, 7, 
  50, -21, -31, 22, -50, 25, 39, -38, 12, 42, 17, 60, 2, 29, -40, 52, -28, 22, -19, 17, 56, 58, -58, 43, -5, 34, 46, -11, 26, -31, 12, -24, -23, 1, 53, 35, 52, -24, 50, 30, -23, -22, 29, 14, -36, 24, 46, -30, 25, 19, -38, 1, -23, 63, 38, 48, -1, -27, 39, 36, -19, 46, 67, -47, 23, -5, 61, 77, 73, 42, -23, 6, 40, -28, -36, -6, 54, 18, 7, -34, 49, -23, 50, 20, -25, -15, 8, 64, 60, 14, -7, -30, 48, -34, 53, -12, 50, 63, -10, 43, 9, -34, 43, 18, -44, 48, 63, 21, 58, 14, -20, 32, -30, 34, 70, 63, 29, 69, 25, 55, -21, 8, 5, 35, 3, 5, 16, -41, 37, 0, 24, 20, 33, 32, -9, 16, 36, 15, -26, 45, 64, 70, -27, 28, 39, 9, 31, 46, 8, 65, 66, 63, -4, 52, 51, 12, -42, 19, 8, -21, 51, -35, 23, -26, 29, 49, 48, -31, 66, -21, -5, -8, -47, 52, -14, -35, -2, 27, -1, -32, -37, 25, 53, -38, -43, 35, -31, 69, -18, -30, 5, 37, 62, 40, -1, 37, 16, 52, -9, 17, 22, 29, -27, 13, -1, 42, -21, 21, 50, 26, 10, -30, 31, 55, 0, 1, 7, 23, 31, 26, -5, 65, 54, 57, 6, 36, -51, 47, 75, 8, -36, -17, -48, -37, -45, -15, -15, 47, -7, 7, -39, -25, 2, 43, 0, 49, 54, 17, 63, -66, -1, 20, -38, 36, -65, 36, 24, -21, -21, -26, 58, 11, 6, 7, -54, -35, 19, -53, -26, 15, -8, -6, -39, -23, 9, -28, -12, 7, 53, 19, 6, -15, -15, -7, 95, 12, 54, 43, -34, -17, 54, -34, -60, -8, 18, 49, 34, -29, -76, -11, -12, 32, 2, 17, 31, -43, 19, 25, 47, -31, -31, -36, 88, 30, -30, -47, 26, -37, 25, -45, -2, -8, -24, 36, 30, -4, -26, -12, -37, 23, 63, 24, 1, -61, 7, 45, 42, -13, -20, 25, 60, 60, 55, 17, -20, -29, -44, -18, 6, 58, 14, -40, 61, 36, -25, 40, 5, -36, 13, -5, 44, -39, 18, -22, 62, -37, -31, 34, -2, 3, 22, 40, -21, 7, -24, -4, 44, 16, 46, 32, 53, -21, 21, 4, -35, 25, 10, 24, 43, 56, -4, -33, -62, -29, -62, -4, 70, -10, -17, -17, -23, -31, 43, 46, 23, 59, -14, -30, 12, -52, -62, -44, -43, -4, -24, -16, 30, -44, 40, -29, -72, -73, -84, 3, 59, 50, -26, -37, -13, -49, -32, 49, -21, -6, 13, 40, 71, -25, -3, -61, -13, 32, 41, -65, 10, -49, 1, -33, -100, -31, -101, -4, 58, 14, -52, -16, 38, -54, -89, 68, 19, 12, -86, 29, 58, -61, -54, -51, -8, -6, -51, -37, -21, 21, 19, -52, -47, -37, -36, 15, 51, -7, -61, -28, 64, -51, -47, 92, 38, 37, -73, 0, 9, 13, 58, -16, 17, -2, 26, 50, -10, 0, 1, -76, -15, -90, 12, -4, 55, -17, -36, -73, -3, -41, -92, 2, 63, -39, -64, 14, 2, -14, 50, 4, 25, -12, 14, 19, -5, 53, -70, -91, -74, -13, -83, -10, -7, -60, -66, -16, -40, 1, -42, 35, 0, 14, -56, -13, 41, -6, -16, -80, -25, -70, 29, 21, 29, 20, 7, -56, 36, -21, -33, -58, 30, 47, -15, -44, 54, -74, -22, 3, 34, -30, 17, -30, 55, -9, -28, 12, 49, -17, -35, 9, -24, 75, 73, -48, -38, 6, 30, -62, -14, -22, -77, -5, -17, 17, -57, 39, -32, 35, -17, -4, 54, 35, -26, -85, 3, -28, -1, 29, -8, 43, -50, 10, -53, -46, -48, -57, -8, 13, -66, -61, -52, -72, -30, 21, -7, 14, -87, -31, -10, -6, 33, -55, -18, -79, -27, 15, 3, 12, -50, -64, -86, -88, -21, -66, -80, -88, -77, -90, 33, 3, -93, -31, -46, -5, -45, -2, -5, -31, -67, -48, -66, -100, -61, 9, -93, -25, -60, -94, -63, -57, -97, 0, -45, -87, -34, -30, -56, -38, -71, -86, -39, -81, -78, -40, -74, -21, -82, -14, -15, -10, -52, -55, -77, -91, -27, -38, -37, -104, -9, -30, -71, -64, -70, -2, -23, -59, -19, -30, -96, -18, -72, 40, -72, -68, 5, -33, -56, -46, -14, -44, 6, -9, -69, -34, -13, 11, -80, -98, 38, -16, -37, -25, 47, -76, -98, 54, -7, -77, -66, 11, 11, -31, 10, -50, 6, -47, -82, 17, -37, 19, 23, -78, -62, -72, -29, -36, 27, -1, 22, 9, 68, -28, -74, 92, 58, -9, -44, 16, 29, 36, -22, -74, -31, -71, -27, 34, -9, 88, 31, -45, 16, -65, -20, -50, -36, -18, -43, -49, -37, -40, 3, 74, 12, -56, -41, 54, 10, -22, -25, 3, -42, -46, -37, 10, 16, 44, -25, 40, -7, -56, -25, -56, -35, -66, -2, 25, 30, -85, -84, 14, 38, 22, 12, -26, 50, -4, -9, -58, 43, -75, -49, -59, 12, 21, 22, -50, -52, -25, -52, -35, -87, -4, -5, 5, -38, -82, -15, -18, 27, -41, -65, 45, -29, -37, 52, -54, 47, -72, -1, -71, -77, -27, 32, -4, -74, -54, 1, 13, -50, 13, -65, 16, -31, -22, 11, 32, -17, 17, -46, -48, -47, -12, -38, -56, -25, -9, -82, -75, 3, 26, -21, 5, 0, -50, -16, 34, -104, -67, -24, 14, -48, -77, -2, 37, -8, -21, -66, -52, -32, 16, 0, -25, -18, -46, -51, -83, -38, -14, 3, -64, -61, 5, -32, -50, -81, -46, -62, -12, -26, 16, -60, 7, -2, -3, -16, -29, 14, 7, 29, -78, -2, -27, -63, -45, 17, 6, 58, -44, -3, -4, -11, -30, -62, -52, -55, -1, 80, -8, 28, -6, 95, 48, -13, 48, -10, 46, 82, -66, 33, -54, 5, 21, -8, 105, 68, -20, 18, -32, 33, 15, 7, 18, 44, -29, 14, 24, 18, 50, -21, 5, 46, 50, -8, 53, 50, -40, -53, -6, 3, 47, -20, 0, 12, 54, 20, 27, 70, 18, 15, -30, 5, -15, 1, 32, 17, 32, 36, 35, -1, -30, -29, 15, 6, 26, 37, 30, -40, 34, 46, 17, -5, 40, 39, -50, 70, -21, 4, -36, -53, -42, 29, 39, -20, 15, 52, -45, 15, 33, -16, 30, 22, -54, 54, 34, -30, 22, -16, 66, 28, -19, -37, 53, 55, 38, 26, 41, 11, 11, -17, -11, -37, 31, 43, 32, 4, -32, 10, -1, 55, -50, 35, -39, -36, -53, -45, 12, 50, 5, 3, 30, -10, 20, 33, 0, -41, -42, 12, 16, 3, -8, 37, 34, 29, -46, -15, 17, 54, -46, 24, -5, -53, -30, 0, 23, -36, -43, 47, 58, -7, 34, -28, -38, 26, -13, -8, -11, 6, -19, 0, -45, 34, 53, 79, 18, 82, -25, -4, 33, 32, -23, 19, 5, 27, 20, 25, 67, 47, -7, -1, 15, 12, -23, -17, 69, 54, -4, -26, -20, -17, -27, -47, -10, 53, -28, 31, -50, -6, 1, 3, 15, -35, -10, 40, 23, -29, 20, 15, 20, -20, -15, -4, 44, 27, -6, -48, 16, 14, -7, -29, 7, 43, 49, -44, -17, -40, -13, -26, 21, -30, -4, 9, -12, -27, 42, 41, 26, 35, 26, -21, -18, 44, 0, 47, -19, -16, 46, -17, 45, -32, 60, -13, 45, 48, 65, 26, 46, -28, -39, 22, 10, 44, -21, -23, 53, -8, -29, 10, 7, 4, -13, 54, 1, 12, 31, 68, 17, -2, 49, -21, 42, 40, -24, -7, -27, -2, 62, 47, 35, 45, -6, 50, -34, -11, -36, 12, -22, -14, 15, 13, 26, 42, -10, -21, 18, 40, -21, -13, -41, 57, -34, 35, 20, 33, 55, 29, 9, 48, 25, 32, 19, 7, 6, -27, 20, 45, -1, 23, -38, 8, -53, 16, 33, -7, 59, 34, 3, 8, -2, -4, 61, -35, 8, -7, -18, 1, -31, 49, 22, 29, 59, 49, 20, 19, 42, -4, -21, 42, 25, 7, 31, -16, -20, 23, -2, -24, -26, -7, 26, 66, -13, 2, 11, -11, 27, 3, -19, -19, 11, 5, -15, -16, 16, -35, -18, -1, -23, 29, -10, 9, 3, 20, 12, -15, 53, 11, -33, 19, 51, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 5,1372 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0012244732351973653, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[28] = { -2569, -7030, 2372, -4440, 3475, -3925, -8907, -4714, 2351, -2128, -8717, 8610, 6941, -6698, -9131, -5144, 6138, -2710, 4952, -6382, -1642, -6457, -2593, -2312, -3399, 7579, 1420, -5767, };
const TfArray<1, int> tensor_dimension4 = { 1, { 28 } };
const TfArray<28, float> quant4_scale = { 28, { 3.7328518374124542e-06, 3.632887910498539e-06, 3.6643921248469269e-06, 3.5728130569623318e-06, 4.2992705857614055e-06, 3.0986489036877174e-06, 3.8972689253569115e-06, 3.3607195746299112e-06, 3.9240571823029313e-06, 3.7412262372527039e-06, 3.7107220123289153e-06, 3.8986877370916773e-06, 4.0545241972722579e-06, 2.950159114334383e-06, 4.031317075714469e-06, 2.1442106117319781e-06, 4.2059591578436084e-06, 3.3625472042331239e-06, 3.9819060475565493e-06, 3.7992060697433772e-06, 3.5003208722628187e-06, 3.6663852824858623e-06, 2.6020168206741801e-06, 3.3065305160562275e-06, 3.6455242025112966e-06, 4.1607745515648276e-06, 3.6051644656254211e-06, 3.7344730117183644e-06, } };
const TfArray<28, int> quant4_zero = { 28, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[28*3*3*32] = { 
  /* [0][0][][] */ 7,27,57,-32,-23,-9,-113,1,51,-50,-89,-13,-32,-14,-3,-8,8,30,-49,90,-1,-20,-77,-36,37,11,-21,-12,59,-15,47,-42, 32,-55,-15,-11,-97,18,-118,85,69,-60,-114,-41,-49,69,-50,60,-22,12,-58,-21,-26,-109,-66,-45,-97,14,-67,-25,69,-52,-27,7, 41,-52,5,8,-11,-101,-127,-37,-65,-113,-112,54,-61,-42,18,-49,3,-15,-4,-26,12,9,-23,-8,-75,-8,-58,-40,68,55,15,-70, 
  /* [0][1][][] */ -55,16,36,39,-7,14,-2,-52,-63,-56,-100,81,-46,29,-50,-48,-70,65,49,8,3,-108,-23,60,-29,45,9,-2,-42,-32,47,-92, -13,14,-43,-26,-74,-1,-9,-20,-18,-3,-37,-20,-40,21,-16,-7,-97,-33,-79,66,-33,1,-96,-19,-41,24,-11,13,26,36,32,-52, -19,10,-40,61,-36,-109,-26,73,-61,-83,-76,-27,-38,-16,23,59,-32,39,-33,20,-36,-56,-44,25,-87,29,3,-28,81,-8,-60,38, 
  /* [0][2][][] */ -94,41,35,50,26,-24,-25,27,-34,-64,-100,-2,28,51,34,19,-26,29,2,-16,30,-102,-5,-5,-58,58,-69,21,7,44,46,-87, -100,-92,54,-43,-62,16,-72,65,65,-26,-96,-10,62,48,60,44,-46,-68,-27,-7,-46,-27,-95,-5,-5,-15,-81,-24,-46,-8,-48,24, -18,-84,53,11,-59,17,-94,41,-21,-76,-70,-38,52,83,71,-5,-89,17,-31,54,-4,-103,-59,50,-43,-10,37,-118,49,-28,-4,-54, 
  /* [1][0][][] */ -55,-30,55,-56,-4,-10,-60,60,39,-87,-89,46,-45,-38,-16,12,-112,-38,40,29,24,-87,-75,8,-54,-52,-29,-9,-27,-60,19,-63, -41,-7,11,-40,-47,-98,-90,-3,-64,-3,-51,-33,-44,-23,-22,-19,-81,22,48,61,-17,-16,31,-14,29,-20,-25,13,70,-51,50,-14, 5,-15,82,-42,-34,-77,1,63,29,-75,-74,42,-2,5,18,24,-91,-5,24,66,63,-19,-15,-58,-65,-16,-6,-65,33,-52,34,43, 
  /* [1][1][][] */ -33,-82,23,39,16,-125,-127,56,46,-46,-85,-26,-52,15,-42,-60,-84,13,0,66,69,-94,0,-66,24,-45,-76,38,-10,79,-29,-99, -48,-11,67,52,13,-116,-75,-8,0,-106,-62,52,61,72,68,-39,-56,-61,-42,86,-16,-66,-72,26,28,72,0,-25,19,-48,-29,-49, -36,-103,25,66,-4,-14,-25,30,6,-28,-94,25,67,56,-55,5,-98,-38,11,53,10,-76,-61,31,-13,21,6,7,-38,-53,-6,-85, 
  /* [1][2][][] */ 18,-38,37,95,19,-53,-90,24,64,-4,-40,27,49,56,-72,48,-73,-47,-73,30,-31,-124,-20,18,-34,1,-81,-91,49,-30,42,-17, -100,-24,72,-36,-89,-47,-19,76,21,-111,-53,57,-51,52,-39,66,-95,59,2,20,-41,-55,18,51,-36,-50,-105,-17,21,0,-20,-44, -20,-20,26,-39,-20,-96,-36,42,-34,-17,-49,74,33,89,45,2,-10,26,-106,68,-12,-109,16,53,-8,39,-5,-43,41,-14,-48,40, 
  /* [2][0][][] */ 46,74,2,-28,66,18,54,-30,0,-23,20,55,6,-21,16,81,-70,91,47,-20,-34,106,127,36,113,-69,15,114,10,-4,86,-15, 18,15,-30,10,44,31,17,-41,-52,85,30,-48,55,-67,10,-38,16,57,-32,-65,33,110,121,-44,0,-80,9,74,-76,-55,71,-48, -8,37,5,-55,-2,-14,8,31,40,113,94,-51,-41,-21,17,78,-4,50,2,-22,-26,23,116,26,65,-55,-43,52,-58,-28,17,20, 
  /* [2][1][][] */ -13,57,55,79,-117,-78,-16,-2,44,-33,-86,-12,68,53,51,-41,8,34,-22,-24,-48,97,16,-36,7,9,-52,-25,9,27,-57,20, 84,46,41,-51,-83,-105,-24,-3,36,-76,-101,3,-17,78,-26,29,7,74,-66,-18,-59,-16,88,-42,-15,13,1,52,63,53,-65,-45, -33,10,74,-24,25,-36,24,15,-29,-42,-13,17,48,37,-56,53,-90,-18,-13,-20,-14,-3,25,24,-56,-26,3,-28,58,-44,5,-12, 
  /* [2][2][][] */ -60,-108,58,-23,-39,-123,-5,72,31,26,-89,-34,20,2,40,-24,-111,69,-5,92,-45,-38,11,17,9,38,-38,21,77,14,-47,-76, 29,-57,11,76,3,-62,-40,-4,42,-114,-81,66,-62,-2,23,-21,-117,-30,-54,7,43,-5,34,-14,-103,-36,-94,15,76,17,8,9, -33,-21,18,58,-37,-83,-39,-2,43,-61,-89,3,32,16,-53,29,-48,13,-45,18,8,-107,-72,-51,-76,82,-81,-83,46,68,-46,46, 
  /* [3][0][][] */ 31,17,50,66,-15,-47,-17,45,-38,3,-42,-15,-17,13,37,-8,-31,59,-74,43,-32,-79,-45,-57,26,-55,-78,58,12,-35,44,-59, -73,-12,3,4,7,24,-69,-52,24,16,-87,-52,-56,59,-59,-14,-89,-13,-99,49,61,-24,37,73,8,27,-83,27,-30,-25,-25,-19, 69,-10,-45,-26,-20,-24,-50,-15,-48,-20,6,53,3,22,-29,-32,-39,-47,-63,37,-20,-35,35,73,-37,16,30,19,-69,-37,11,15, 
  /* [3][1][][] */ 15,23,-29,59,-77,-84,9,31,1,5,-19,35,45,-35,10,39,-56,3,29,68,-54,-60,13,-82,-57,19,-106,-70,19,58,-33,-104, 71,14,-11,58,-47,-118,-92,-2,-55,16,-72,-18,-7,-47,-46,-66,-56,63,-93,55,3,48,-14,11,-6,-58,-58,-20,67,-62,-72,-1, 4,24,-59,38,-19,5,-47,68,53,-20,-126,34,-29,-29,51,-66,-107,14,-43,-21,55,48,15,20,28,35,0,9,-48,40,-71,44, 
  /* [3][2][][] */ -59,-21,89,86,-45,5,-65,-1,7,22,-114,-7,34,54,27,-30,-22,-53,8,88,-56,-74,-95,-65,-81,54,21,-33,-28,-16,-17,34, 7,-52,13,65,-73,-102,-22,38,-56,-127,-102,63,-27,-45,15,14,-37,22,-58,-16,-13,-87,-53,-7,-48,50,-61,-59,-63,47,37,-40, 42,-85,-23,71,35,-85,-101,-27,-58,-74,-67,64,42,87,73,-3,-54,60,-12,-43,-18,23,-9,1,-37,23,-60,-49,3,83,-39,8, 
  /* [4][0][][] */ -36,44,95,12,66,68,-65,74,15,20,81,57,54,41,-43,70,79,12,34,59,-8,-21,-15,-14,3,91,16,19,6,18,22,82, -25,-14,61,-15,99,66,37,28,-48,42,68,-7,45,76,-34,-48,119,43,-19,57,7,-35,-3,54,-40,69,-5,32,69,-23,47,20, -21,26,33,56,108,33,-12,-30,-35,-25,37,-34,21,-2,55,28,44,-23,29,27,2,50,4,14,61,-12,-9,-15,29,-1,-34,84, 
  /* [4][1][][] */ 70,73,11,-19,94,121,96,14,16,-10,45,-8,-51,-2,22,-42,42,-41,74,10,-13,-5,3,102,114,11,32,8,9,-3,-21,14, -2,41,40,-52,80,22,41,-38,47,106,53,25,-5,38,-24,-39,127,27,84,-51,21,36,20,86,75,-34,76,41,-8,7,60,9, 62,26,0,-27,97,4,105,-32,42,112,17,-31,48,23,24,40,125,-23,39,40,60,74,-30,20,-4,64,45,77,35,32,19,63, 
  /* [4][2][][] */ 58,66,-46,25,12,47,65,-68,10,24,30,-35,-27,-54,55,-63,71,17,76,-17,-26,61,56,-17,93,-75,74,2,-33,-23,71,20, 38,53,-62,-84,98,76,117,-80,15,-1,76,-23,20,-61,-25,-52,11,3,67,-5,-52,0,5,-21,22,-30,68,56,19,-60,69,38, -13,51,-89,-54,-1,74,108,-18,50,6,113,-31,27,-40,-21,51,91,5,45,-23,49,52,16,12,27,-17,96,-7,-38,-16,58,-1, 
  /* [5][0][][] */ -80,-19,-11,76,69,-40,-93,22,-69,22,-15,91,11,34,10,-56,33,80,-29,-33,38,-2,28,-33,-45,7,-7,-67,53,-45,-80,-26, -1,-6,25,29,-22,-26,-82,81,-58,-61,51,-65,58,85,-28,-43,-9,45,-57,-58,-7,-34,61,74,66,111,-11,34,67,82,64,92, 10,-54,9,22,58,92,36,54,-10,50,67,64,-43,90,-26,-65,-32,67,-81,-27,-42,-85,-64,-20,-52,-16,86,-51,-1,84,-77,-13, 
  /* [5][1][][] */ -95,19,-40,-13,-20,86,43,56,46,14,56,45,-80,-6,107,-22,-36,19,5,10,33,-25,-48,-49,37,80,76,-80,102,19,2,109, 61,48,-16,-77,21,-22,-29,20,-15,36,127,85,-25,-8,94,40,72,62,-90,10,76,39,73,-5,63,27,-6,16,-49,-67,-60,19, 34,-32,33,-17,-10,26,109,-20,-18,32,78,31,-56,-25,88,29,68,73,-97,-69,3,55,-20,59,-34,47,82,-48,11,49,-25,-41, 
  /* [5][2][][] */ 38,40,-9,52,2,16,68,56,65,-47,25,-18,31,-9,10,14,24,11,-52,-68,-64,36,4,-35,-52,89,90,62,-41,22,71,90, -30,39,-16,28,124,31,30,11,47,-5,125,-63,59,-37,-21,-26,5,-70,7,-24,-58,54,-22,-15,122,56,107,-16,74,-60,14,38, 73,-18,0,-14,-25,101,-24,-66,-26,1,86,46,27,-8,-14,73,73,-23,-10,33,28,93,51,3,77,-34,11,14,-11,34,19,34, 
  /* [6][0][][] */ 62,-39,-3,-14,-55,-57,32,-14,14,-69,-127,57,12,14,41,-1,-110,75,-69,-41,-62,-27,58,2,23,57,-35,-28,-19,37,-25,0, 64,52,-24,69,-1,-103,-25,-16,-6,10,-4,-3,-53,17,26,-69,-103,-13,-64,8,-1,-78,7,32,16,20,-48,46,3,51,62,-53, -4,21,68,26,-61,-66,-80,51,-62,-102,-59,63,35,42,44,-22,-47,31,-83,-25,58,2,-70,-61,-34,-28,-80,-85,55,34,-35,-25, 
  /* [6][1][][] */ 0,-42,1,35,-91,-48,-61,85,-44,-16,-95,-27,-12,83,-79,-60,-8,57,-76,35,34,-106,-4,-13,-58,8,-12,-17,-17,-10,18,-27, 1,-85,5,-33,-50,-108,-102,-17,-53,-105,-84,3,36,-22,3,-33,-28,-4,-65,20,18,-34,-119,-30,-115,53,-81,1,71,28,-62,11, 24,-108,24,0,-47,-88,-57,5,44,-64,-103,34,33,49,1,-23,-85,-33,-51,68,11,-116,-2,32,4,17,-73,-115,24,62,-55,-33, 
  /* [6][2][][] */ -93,-48,-28,-11,-45,38,-46,-43,2,-77,43,-18,-52,69,-55,-45,4,-50,27,53,49,14,-6,46,-57,59,-67,-4,35,-19,11,15, -74,-74,-51,52,2,-59,0,13,-48,-99,-3,-5,62,43,-11,-68,34,41,-9,10,-49,-65,-50,-71,-23,-44,-12,-28,11,54,-3,32, -52,-15,23,45,12,-65,-109,30,-31,-91,-76,-16,-19,34,-4,21,26,-67,-45,59,-53,11,-31,-19,-59,-8,-58,-73,62,-46,45,-58, 
  /* [7][0][][] */ -11,28,-47,4,-9,-86,44,63,35,-64,-79,39,25,30,49,27,36,-65,19,4,60,30,17,-5,-18,-40,6,-71,-64,-60,-55,-93, -38,-33,58,-14,-17,-38,71,-64,53,-26,-46,-2,35,15,64,-67,-91,-10,-14,37,-74,67,60,-40,-47,24,-65,53,-74,-2,-49,-31, 4,22,5,-1,-12,-67,-29,65,-44,57,-11,18,-74,30,-8,20,-8,-52,-8,56,1,52,6,59,-51,-22,-31,-49,3,18,-66,-30, 
  /* [7][1][][] */ -73,28,-30,-40,-17,-32,21,49,-47,-24,28,53,-59,-46,57,-59,-58,-79,2,-35,12,-92,1,-9,-88,-26,17,15,23,-34,-86,23, -7,35,63,53,-42,-73,-27,-60,45,-92,-54,-6,-35,-32,22,34,7,46,12,-25,5,24,-88,-8,-70,0,-124,2,15,-39,-24,-4, -64,-74,5,32,-59,24,-109,-3,43,-85,-82,50,-51,26,69,60,11,15,57,-34,4,-35,40,36,-4,-11,-28,55,56,20,23,-81, 
  /* [7][2][][] */ 30,45,76,-13,-90,9,-41,75,-18,42,-100,-19,-44,22,-34,50,-79,9,-14,82,29,40,-28,-89,-91,4,9,-90,59,75,-74,-88, 42,-15,-32,-62,-51,-70,-13,50,-13,-23,-16,64,-76,6,-9,13,-117,61,7,44,73,-63,-66,0,-12,-28,-37,-59,-25,-25,13,-73, 32,-29,-36,78,-25,-102,-127,58,-59,-87,-43,-71,-27,44,22,-32,-5,-20,-85,-56,-11,-45,9,2,-95,-13,-86,8,-19,38,15,-3, 
  /* [8][0][][] */ 69,19,-34,-17,106,50,61,-66,-65,94,89,2,33,-7,77,-8,63,74,23,-13,1,122,-2,37,19,47,88,98,-64,-1,88,29, 82,10,-59,1,107,120,63,24,44,-11,4,-23,11,12,-35,2,5,60,69,36,39,50,-10,-36,31,-64,88,53,-59,48,2,5, 0,38,8,37,72,60,67,54,-3,21,6,-59,-28,-14,5,-27,127,57,32,-49,-29,81,84,49,30,14,7,-2,-50,37,31,-12, 
  /* [8][1][][] */ 65,-2,5,-58,95,74,24,-70,-8,55,66,-46,-41,47,68,-46,3,-36,53,-34,-7,124,51,56,89,-10,10,43,11,8,22,29, 93,44,-48,0,108,45,119,38,-22,4,110,-16,-17,-8,-51,15,44,29,8,-6,-18,28,51,13,74,-47,32,77,30,-50,20,-29, -19,60,10,-10,91,14,56,-37,-60,67,4,27,48,9,63,-1,-2,48,14,-42,47,7,42,-55,65,43,-19,109,-53,48,45,8, 
  /* [8][2][][] */ 86,68,-10,30,83,78,95,-60,55,-4,-8,-3,15,-33,-38,84,25,94,96,-30,23,92,4,10,72,-2,-35,90,-14,-36,52,-23, 3,19,59,35,63,72,81,45,45,37,91,54,9,24,16,-4,48,-28,18,-16,48,21,104,20,15,40,77,115,-14,35,-10,-10, 11,74,46,-11,48,36,105,47,3,-12,8,60,-15,13,7,-31,34,14,30,-25,27,10,85,10,83,69,-21,4,21,42,53,-53, 
  /* [9][0][][] */ 57,65,-4,43,19,-6,51,-65,-19,-32,-15,8,30,36,35,13,-76,-20,4,9,-54,63,-15,-37,62,-76,-102,58,55,27,63,-102, 42,-20,31,-15,15,-21,61,0,-35,17,-7,62,-6,1,3,45,-43,80,34,-46,-48,-38,71,-41,21,-15,15,84,-70,-20,54,-54, 97,-13,7,35,-62,-46,59,-36,40,58,-57,81,56,-36,3,-35,-32,0,-68,28,25,-20,109,55,-34,-17,-79,89,-22,-55,79,26, 
  /* [9][1][][] */ 38,-61,13,36,-58,-120,20,71,15,-85,-73,23,-57,-9,-22,10,-72,-1,54,-56,-25,25,-70,-72,6,25,-75,-21,55,18,-4,-55, -69,1,61,-17,-34,0,-82,51,-38,-95,-125,-31,15,-10,4,-1,-81,40,-88,-36,-42,-34,51,19,-53,75,-99,-59,75,61,-78,-57, -16,11,-34,2,10,-45,-36,12,-9,-1,-79,23,58,20,-28,35,-9,-44,21,38,68,21,-30,30,-24,77,18,51,38,15,-2,26, 
  /* [9][2][][] */ -20,-9,-49,-21,-82,-109,-110,46,33,-24,-87,42,-39,35,51,25,-91,9,-73,11,22,-106,-122,18,-75,-11,-68,-14,-21,-38,-44,1, -80,-42,47,42,-19,-96,-127,71,-61,27,-123,57,30,57,38,-49,-5,-15,-90,-22,-48,-6,-31,48,-34,3,-60,-64,83,-44,7,-60, -104,-7,50,47,18,19,-101,1,-42,-91,-8,18,-30,-45,-41,56,-48,46,-54,-12,-47,-28,-102,35,-10,-20,-13,-46,65,-38,36,0, 
  /* [10][0][][] */ -75,-15,26,62,-75,-112,-26,20,-48,-65,-37,86,31,-30,34,-10,-45,-41,-44,78,-26,-11,-89,-64,-100,24,-84,-18,15,-33,6,-91, -95,-59,75,-33,-86,-78,-69,12,45,-21,-83,-7,61,4,60,-62,-88,-62,-68,57,-12,-2,-85,7,16,72,-33,-99,18,75,-28,-96, 33,31,-11,42,-82,-9,-14,36,5,-106,-3,-7,-44,48,49,-49,-94,-17,-127,19,32,8,-85,-53,-73,-24,-68,-103,90,27,14,-34, 
  /* [10][1][][] */ -4,-113,69,12,-59,-103,-105,71,68,11,-100,65,-28,-23,53,-28,-78,-36,-77,-15,-8,5,-114,59,-20,60,-19,15,-28,69,-24,-111, -96,-34,-29,-11,-13,-115,-34,52,-2,-106,-112,82,6,103,-12,-42,-44,-39,5,-34,-32,-95,-95,-14,-28,-18,-98,-124,29,30,4,-74, -91,-67,8,43,-89,-14,-126,61,12,8,-46,32,32,57,-36,51,-71,-53,-84,73,-63,-14,-37,22,1,-5,-17,-3,-15,66,14,-43, 
  /* [10][2][][] */ 10,-85,1,60,-65,-6,-118,49,-7,-2,-52,17,-22,95,-62,-36,32,50,7,26,-4,-117,-116,61,-35,86,22,-60,24,-36,-3,-42, -104,-85,-30,10,33,2,-52,25,-67,14,41,58,7,-24,-1,14,2,58,-70,39,57,-41,-111,21,-79,48,3,-37,-7,-51,6,46, -61,-101,11,13,61,3,-53,-14,56,-118,-37,-2,27,12,64,-33,-48,41,-18,66,-5,-63,11,43,2,-22,-51,-112,76,-41,-41,8, 
  /* [11][0][][] */ -6,64,29,-42,35,116,117,-10,-4,69,42,-55,-58,-4,10,38,108,58,45,-62,14,122,124,70,45,-28,116,33,-52,-6,-12,122, 67,80,-47,-55,50,71,14,-65,38,108,106,-42,51,5,-30,15,54,68,-3,-5,9,65,35,-31,70,-41,63,74,-6,41,104,114, 120,115,-22,-41,100,123,65,42,49,46,21,-31,-14,-69,4,61,14,38,67,-22,-51,127,4,82,116,-58,80,105,46,-53,-4,67, 
  /* [11][1][][] */ 16,23,-67,28,38,36,9,-23,61,120,76,-50,15,-46,-38,24,28,32,83,-58,42,94,107,63,68,12,105,49,-64,-14,97,66, 42,74,14,-5,2,23,115,-57,-7,56,2,-5,-32,-64,-67,58,72,-19,15,-46,11,101,3,-1,4,-12,107,74,54,-60,-11,82, 70,23,26,35,32,15,48,29,50,112,35,55,32,21,-17,-4,90,-12,-2,31,-31,106,72,30,81,-64,5,106,-21,22,34,39, 
  /* [11][2][][] */ 12,101,36,34,74,45,76,-40,6,62,-66,13,10,66,-36,29,-21,30,-19,-4,-25,114,57,-39,72,54,-11,10,23,43,60,-28, 119,-12,32,59,20,55,57,12,24,17,-34,42,-28,24,-31,-20,42,30,68,36,-31,35,30,38,-35,-54,43,38,60,30,41,18, 121,91,47,-31,-42,-30,-3,23,14,99,68,58,7,-30,-30,50,-46,47,24,66,-55,105,-7,-79,-41,60,87,11,2,19,75,4, 
  /* [12][0][][] */ 2,108,-72,-14,43,22,31,-5,-53,33,107,-68,-59,-29,16,55,80,48,35,-3,-15,106,72,77,89,2,108,-10,-68,-52,-21,71, 19,110,-20,-32,0,85,44,-27,-10,37,98,-32,20,-51,107,13,69,72,88,-42,1,13,45,41,103,-29,4,94,-39,-47,31,104, 25,53,-4,-29,28,62,113,-1,49,110,78,-5,-49,11,1,45,112,10,64,-31,21,14,97,46,53,6,24,33,46,-45,17,84, 
  /* [12][1][][] */ 83,94,7,-13,12,81,39,35,54,23,45,-25,-58,22,-52,-14,73,16,80,44,-15,21,108,-65,19,-68,72,29,-35,-50,34,30, 34,-12,-14,6,5,-3,17,40,-38,96,13,-3,14,-10,4,23,-8,70,86,-8,31,88,86,-57,-11,-31,2,-3,-27,-60,60,-39, 24,85,9,61,-4,29,114,50,-26,-2,80,0,-18,34,-21,85,13,8,35,-7,-16,106,70,-40,84,-39,22,-11,-41,36,37,50, 
  /* [12][2][][] */ 114,21,12,-36,-4,-51,52,-42,-36,67,-69,81,56,24,-27,-8,-9,4,92,40,48,109,127,-14,101,25,45,48,14,-38,71,40, 96,56,-27,9,-32,-26,105,68,53,34,-9,18,18,74,-2,52,-40,23,8,-16,-29,82,38,-70,3,-37,-34,88,-48,15,81,46, 113,78,52,73,-4,6,108,-28,9,23,11,75,-59,27,16,84,-74,79,44,-18,-57,57,42,-86,1,76,11,21,70,-18,-1,-5, 
  /* [13][0][][] */ -5,34,-9,-16,-76,-29,-85,97,-45,-23,55,-48,-68,89,60,-18,83,-11,-64,73,-78,-13,41,23,28,-5,29,-74,63,-6,89,-50, 2,7,38,33,-12,24,12,-36,-24,-22,-30,-70,33,24,-44,6,-24,-33,-2,90,-38,-33,-88,-83,-48,48,40,-55,79,-48,10,92, 41,-48,28,64,69,-56,-14,28,-52,0,48,44,-43,13,23,33,-99,-63,-14,-43,10,-66,26,-26,-41,-32,66,-33,12,49,-36,19, 
  /* [13][1][][] */ 30,48,-43,20,37,30,89,-67,-27,36,50,79,-63,14,15,94,60,46,9,64,11,-48,6,-6,97,-13,-64,-34,35,53,-31,90, 36,58,-10,62,-35,94,-17,-55,3,-29,85,-57,10,-78,55,-6,40,36,13,30,-66,-47,-69,7,-58,19,45,-6,-6,8,69,6, -12,36,-2,-20,-102,-33,-7,52,7,-21,100,49,61,47,72,40,87,-65,12,-67,-42,-124,68,9,-112,23,-36,10,-70,25,-27,8, 
  /* [13][2][][] */ -26,49,-43,81,13,127,79,-43,63,-52,91,20,-61,72,24,-11,18,61,-40,-67,-64,108,108,-56,-27,-18,26,56,64,57,88,50, 37,-74,48,-34,77,65,-7,13,-62,49,36,5,13,34,-98,25,19,-57,24,-86,27,89,76,-57,24,62,91,96,74,4,22,45, 75,-71,22,-60,-69,51,-52,17,29,-25,-23,-66,-62,-59,26,-18,90,90,58,-15,-54,-49,32,-93,75,-94,97,32,-45,-59,69,-19, 
  /* [14][0][][] */ 44,-50,-45,24,-79,-96,-89,-47,34,-56,-84,-6,-54,67,-15,16,-106,53,56,7,23,-56,8,-64,-54,19,-10,33,38,32,51,-71, -17,47,55,54,-44,-49,16,-47,-7,-48,-94,-42,-12,-43,-25,-12,-73,23,-90,64,-9,11,-8,47,7,52,-70,24,-65,-19,4,-10, 39,42,38,-34,-115,-90,-67,22,-42,-33,-127,-6,-11,62,-18,6,-2,19,-39,51,45,-39,13,-25,-60,-6,-87,38,-40,-33,-32,-86, 
  /* [14][1][][] */ -40,-91,50,47,-65,-14,-85,-39,9,-65,-57,74,-30,76,-9,69,-50,8,10,-7,29,-73,4,9,-12,33,-44,-49,80,83,2,-23, -32,-19,68,77,-49,-64,-13,83,32,9,-13,69,10,66,-23,15,-67,29,23,84,24,-42,-41,-48,-73,78,-35,-52,-26,73,-6,-45, -46,-17,-49,52,-46,-76,-70,74,41,-20,-3,-39,17,-11,-8,-56,-62,28,-104,-33,21,-89,-24,-34,7,25,17,-43,27,62,-7,4, 
  /* [14][2][][] */ -11,-55,67,-23,-46,-10,-1,26,-36,25,-59,29,61,-22,13,17,-17,-46,-24,-36,10,21,-23,7,1,49,12,-57,29,68,4,-54, -82,0,-22,10,28,-64,-109,15,44,-64,-47,35,-36,-14,-51,25,46,-55,12,19,-44,-101,-74,53,-32,85,70,-92,86,-9,-56,72, -88,-54,69,-45,14,54,-48,31,8,-56,-26,13,2,57,-23,-16,-20,63,23,-23,-46,-33,24,-23,-46,74,72,-7,19,40,-6,11, 
  /* [15][0][][] */ 75,-56,-104,-98,71,-63,126,-67,11,-42,-72,46,-16,-37,105,-13,10,43,-32,-112,-18,-59,76,33,115,-108,-77,50,-25,96,-55,-51, 19,48,87,-35,-22,-117,4,-46,-73,61,-50,94,56,-104,-21,-67,74,-64,42,71,72,74,-82,8,68,-123,-19,58,21,-63,-28,-116, -3,62,-90,-45,70,14,-91,15,-15,-91,70,37,74,-84,-20,-84,-99,10,7,89,68,-66,121,-92,55,-51,122,-26,-85,-30,112,-120, 
  /* [15][1][][] */ 74,-46,35,-92,-111,2,17,18,20,78,-10,66,-19,83,-91,-75,61,-114,-105,0,-83,71,-12,73,0,41,111,51,2,27,50,79, 84,-96,-59,-33,-30,-37,3,-60,90,-84,22,-97,32,97,-87,-9,-1,-79,-18,90,-43,-29,-110,66,-38,82,55,-111,-32,-109,75,-67, -108,-120,-91,-57,-38,59,39,-17,116,-126,12,-33,8,27,-2,-58,-58,-41,-98,7,-77,-115,-40,-19,-18,30,57,-57,-26,0,25,-9, 
  /* [15][2][][] */ -62,-62,-22,-23,96,-53,81,52,75,53,-8,9,106,-92,82,-36,-98,-127,-50,-75,89,-73,24,-64,112,-3,6,114,-57,69,93,-72, -118,58,-61,-72,92,97,-6,-51,70,-82,39,-16,-108,-127,-7,-54,-62,108,-95,-109,-41,91,-87,-118,-87,-23,-62,-91,29,-33,-50,-37, -124,33,90,-56,-34,28,-28,-97,29,-29,14,-26,-81,94,-4,-105,-111,-36,78,-97,-24,95,61,-109,58,-113,25,56,89,-90,90,-106, 
  /* [16][0][][] */ 68,3,30,13,72,56,103,38,-56,72,108,-42,37,30,0,27,46,34,18,1,-50,2,80,21,90,22,127,2,-41,-50,50,11, 70,67,37,-35,119,53,74,-24,9,79,70,42,24,9,34,-29,83,62,42,44,36,-8,71,11,35,-44,73,30,-16,-4,43,-19, 85,80,-53,-63,75,78,90,27,-45,85,35,-55,-48,-23,6,-2,46,67,79,42,8,99,61,34,29,25,44,104,-6,-26,50,34, 
  /* [16][1][][] */ 13,87,55,-23,117,91,70,21,52,32,69,10,37,-45,51,5,83,-2,26,-28,-20,41,68,75,97,-21,84,-8,9,28,-35,43, 71,10,-55,-57,98,80,17,-17,-37,54,39,-46,-61,-30,-53,52,75,-38,78,-13,-33,-4,94,49,12,5,84,-1,-50,-31,70,-13, 66,35,40,-40,58,11,45,-53,34,126,46,20,-1,-43,23,34,126,24,93,16,-40,54,100,52,49,-54,35,57,-66,-57,72,11, 
  /* [16][2][][] */ 82,75,-3,36,32,33,74,-40,-23,16,-11,-11,1,21,32,77,-33,51,-37,-5,41,94,112,46,-3,-35,79,45,48,-1,56,92, 117,15,-35,52,-4,-23,89,57,12,37,-13,37,35,0,-33,-32,36,17,-35,16,24,105,14,27,97,-43,18,28,54,16,70,14, 108,102,17,-7,-8,71,8,23,46,70,19,-15,-47,10,18,73,74,10,9,47,16,74,22,32,24,27,66,34,-2,15,38,-31, 
  /* [17][0][][] */ 88,6,-49,-50,1,39,7,43,72,-21,-20,0,-2,23,127,-17,-70,8,-17,-7,-21,103,0,60,-23,14,48,34,42,34,30,36, -7,71,-71,0,-23,100,47,23,-74,81,110,57,-28,-22,-22,77,98,41,1,-64,13,75,-41,-41,-25,1,19,-38,-22,-14,38,-1, 25,-57,-43,22,13,-13,86,7,73,86,8,58,-12,-92,-79,-13,-33,48,88,30,-16,55,44,55,66,20,20,82,-36,-60,-55,52, 
  /* [17][1][][] */ 6,57,36,-41,-13,-112,38,52,-70,21,-14,-20,44,14,-34,13,-48,67,55,63,-25,-50,58,31,75,-70,52,28,39,-54,82,72, -48,-25,-39,35,26,1,62,-58,53,46,51,51,-19,27,1,64,-62,66,37,-44,9,-30,-23,6,32,36,22,-22,65,16,-2,94, 25,-17,10,58,-10,6,-41,-60,-5,76,-53,54,14,-49,-47,47,-35,52,15,37,-31,89,35,-67,24,-64,7,71,23,-60,44,-41, 
  /* [17][2][][] */ 33,-69,-30,-16,1,-103,9,30,-3,-62,-26,-2,28,10,79,-11,-20,-19,-82,45,-66,-16,40,-21,49,-9,6,11,-9,46,8,-8, -44,-20,-63,-64,-41,-39,-3,57,-37,38,9,81,-59,18,6,57,-34,-21,-22,10,51,36,-51,-62,41,71,-50,-83,76,-15,-1,-8, -4,-56,-45,30,74,-56,-33,8,12,-40,-55,-2,-51,-58,7,-53,-87,-57,17,71,29,-97,50,40,-13,-73,47,39,43,5,-7,73, 
  /* [18][0][][] */ 79,103,1,-4,110,106,63,-24,62,96,29,-15,49,-70,41,-9,55,29,67,-66,47,68,127,89,57,-24,13,96,-33,-60,-54,-20, 110,53,-1,-42,33,96,62,-49,-44,19,36,-27,31,-84,49,59,-24,-44,-37,40,47,27,78,-11,57,-88,62,93,12,-80,85,45, 65,7,-53,37,11,16,107,-48,51,56,17,30,31,-13,-33,-28,65,9,22,38,61,74,-2,-2,72,31,-20,18,-33,-78,-18,-44, 
  /* [18][1][][] */ 76,83,-39,10,-5,34,47,-14,42,82,75,52,4,32,-23,23,-70,53,39,19,49,22,-4,-28,11,-24,30,83,13,-37,38,-33, 54,-38,14,14,22,16,92,-8,-50,68,-40,7,7,0,-59,16,-11,59,-60,5,16,-8,87,11,65,-23,-31,35,7,-53,43,-21, 13,86,-19,-42,-63,-6,60,12,48,57,0,81,5,29,24,12,-29,26,32,42,-16,21,-30,-23,-22,-20,33,50,9,-55,-24,-37, 
  /* [18][2][][] */ -26,50,62,59,-36,-87,53,17,22,-56,-41,80,-21,5,65,-35,-65,-9,-12,5,3,73,44,-63,-2,-32,-5,36,-19,16,-26,-48, 61,33,73,19,29,-25,32,58,-41,12,-97,64,-29,-52,53,24,-60,-22,18,35,-64,31,-9,11,-81,-19,23,-32,23,-9,-41,32, -32,-63,-34,65,1,11,-36,58,29,-87,6,11,-22,-16,17,-53,-58,-37,-42,17,-21,14,-49,39,15,-16,-58,35,-16,26,-39,-71, 
  /* [19][0][][] */ -56,-41,57,73,-34,-57,-49,68,19,-80,-120,78,40,46,38,-64,-105,-5,-64,38,-42,18,-86,-33,-3,51,-39,-66,65,-40,-37,2, -29,42,-21,-41,-94,-41,6,29,27,-89,-27,52,-58,33,-40,-37,-14,56,-84,76,-62,-40,-21,-5,-69,14,-94,-71,13,73,22,-107, 50,6,-58,-44,-87,-56,-107,66,39,-31,-68,-23,17,63,-27,-61,0,35,-123,7,51,-28,50,-4,-49,26,-10,30,-59,-57,-8,-32, 
  /* [19][1][][] */ -7,-71,76,54,-1,-124,-49,-33,-11,-47,-30,49,-33,-24,-39,-8,-10,-44,-48,63,-57,-103,-12,-82,-59,31,-60,-13,-44,-50,-28,-26, -51,-78,-38,-16,9,-60,-11,-30,65,9,-67,-15,-41,69,44,-10,7,-14,-101,-10,-57,-127,-80,-70,-37,-42,-47,-112,-41,25,-23,6, -53,-70,53,57,-41,-68,-14,47,-54,-41,-56,14,-57,21,38,-56,-35,-39,-13,71,12,-93,11,-46,-64,30,-4,-35,45,28,18,-12, 
  /* [19][2][][] */ -23,21,-27,-31,-68,-12,-95,18,-12,6,3,47,35,-27,-63,-61,42,-32,-10,-24,35,-6,-20,-78,-37,11,-69,-92,-17,67,15,-38, -58,-45,48,75,-92,-44,-35,-6,-45,10,9,-37,-56,34,15,-38,-22,-26,-58,43,-57,-103,-47,-28,-106,69,20,-61,-5,31,-72,-69, -16,-89,65,43,25,-60,-87,73,57,-114,-54,-4,26,37,-53,-56,-23,-49,-101,-30,-35,-116,26,35,31,54,61,-79,-20,-57,-66,-6, 
  /* [20][0][][] */ -35,103,-41,43,-42,41,-7,-35,-15,52,110,-7,-23,-12,-56,-6,86,-71,68,-16,-66,105,-18,-54,42,50,44,18,-49,-42,51,-15, -4,-9,-12,-45,-13,64,-10,-62,69,-16,21,-26,26,32,-48,38,4,56,52,-13,-30,17,57,-26,-21,41,-1,-31,25,-53,31,66, -80,56,-75,-7,74,57,0,44,6,69,-31,-28,-69,-15,-30,-17,98,-80,31,-61,-29,1,35,5,14,56,-40,-3,66,-38,7,-64, 
  /* [20][1][][] */ -7,-36,-48,-56,-9,21,-4,-65,-3,66,-5,44,-35,14,-66,4,9,-11,0,17,-47,101,42,-41,92,-41,-3,100,9,-21,104,63, 41,16,11,-68,15,74,22,48,41,26,-30,-70,-46,-20,53,-1,95,-50,48,-59,-13,43,72,45,-39,-70,78,-7,-12,-50,117,-55, 33,8,-68,56,-32,20,-10,2,-41,111,40,22,45,-14,56,22,75,13,0,51,52,62,40,-8,-7,-40,29,109,46,-11,88,11, 
  /* [20][2][][] */ 40,87,-70,35,1,62,-5,72,-12,71,28,-50,-10,-72,-13,14,-34,-12,83,32,-55,127,88,36,75,-1,-33,45,55,61,50,7, -17,-21,0,23,10,-53,48,4,29,55,-49,19,-59,-36,1,5,56,93,52,62,-36,28,45,-18,8,42,47,101,-30,74,-32,44, 43,22,90,31,-30,19,35,43,32,-33,41,91,-18,56,-28,-5,38,-13,24,-20,-42,81,13,-27,11,-4,34,-31,10,5,-62,17, 
  /* [21][0][][] */ 17,12,-47,71,-107,-100,-57,62,-20,-19,1,6,-46,37,-1,-49,-66,-24,-50,85,43,-29,20,16,14,80,-35,-81,-34,89,-16,-35, -7,-46,71,-49,-9,-17,-79,70,-34,-2,-98,-29,-14,-19,65,-21,-54,-46,-77,-16,-67,-103,29,4,18,12,-11,-32,-1,-29,16,-73, 17,11,-42,53,51,-121,-12,47,-67,-5,-113,42,-65,54,-67,-76,-44,-38,-84,-60,-22,7,46,-57,2,40,-45,-43,74,-9,5,-3, 
  /* [21][1][][] */ -6,17,-52,-23,-69,-38,-33,81,31,-96,2,71,21,-13,-66,-2,-105,22,-42,80,-13,-21,-8,-24,-21,-41,-71,1,13,-37,23,8, -58,-118,46,5,-79,-59,11,-22,-6,-33,-9,-49,-68,18,-37,-7,7,-40,-50,-43,68,-57,6,-19,-90,72,-36,0,74,-27,42,34, 9,-60,-23,-2,-22,-26,-68,-25,15,13,-80,62,-60,27,-58,-15,-59,-31,-55,48,61,-39,38,-10,-45,52,-48,5,-21,32,-35,-6, 
  /* [21][2][][] */ -27,-90,33,-16,21,-30,-105,6,-64,-24,40,-62,-39,75,2,-18,46,-49,-1,-48,-5,-115,-114,-58,-65,-28,-90,-17,79,53,35,13, -106,-66,-38,1,-82,23,-116,33,58,-36,-11,40,-17,-8,-55,-60,-40,36,-39,-1,33,-80,-100,63,20,-28,-27,-68,50,47,-42,-63, -13,22,13,55,-7,38,-15,31,-23,-33,2,-66,27,25,35,-81,-95,-45,-21,18,-37,-127,-35,-37,-6,69,-1,5,46,0,-30,23, 
  /* [22][0][][] */ -6,18,-16,54,23,25,6,-86,57,11,-35,-63,-73,88,-40,68,3,67,56,68,39,-78,21,84,-71,17,-115,48,57,-82,63,-3, -8,93,91,-91,-84,-30,-61,-38,-45,-91,-87,76,-97,-84,8,-47,-38,5,-71,85,38,80,66,10,64,1,36,64,83,-20,24,95, 29,-2,-82,-76,39,27,-45,-37,-72,-29,53,-54,-97,-44,36,-10,-64,-41,52,-49,-62,-32,-109,11,-89,79,-59,34,24,90,-81,-24, 
  /* [22][1][][] */ -70,37,80,18,67,61,46,-36,-96,2,-111,-29,46,-77,18,-54,-73,-77,71,83,40,35,-38,7,38,52,71,30,-26,87,54,54, -44,-99,-11,-77,-24,-26,-101,68,31,-37,-59,44,7,43,-85,-57,-112,80,-90,-63,-24,-46,-38,97,-10,80,73,-48,-32,-7,-74,57, -31,57,38,12,-95,70,65,33,23,-18,-62,-52,95,-76,-35,-27,-16,-96,64,-8,-46,-92,-97,77,8,-53,-103,-14,72,96,37,-102, 
  /* [22][2][][] */ -93,-15,95,-72,7,64,-45,0,-24,72,-44,-50,85,10,74,47,72,-101,-67,-87,-78,-79,50,41,-44,-44,-20,-28,-90,86,40,7, -63,11,59,-26,-5,102,-55,-22,-32,-33,-46,-8,-24,-4,90,-104,88,-41,0,78,-17,-127,1,20,98,99,-4,-21,5,-58,-1,67, 26,-22,33,42,114,-11,-81,-91,-90,92,93,-37,8,26,83,-36,-40,-39,79,-58,-2,59,49,70,55,-89,97,-35,83,53,-94,-44, 
  /* [23][0][][] */ 106,16,-11,-51,111,43,47,-90,44,60,122,-64,71,42,5,-45,30,9,31,-91,-35,55,104,-26,59,-41,17,18,-4,38,-37,19, -1,11,16,-75,32,127,23,-2,30,113,75,71,-54,64,-36,49,126,95,-28,6,-46,72,112,-14,34,27,8,51,-8,29,22,88, 102,-29,-4,73,126,113,35,-47,-72,124,25,-42,34,72,86,64,97,-54,126,-52,11,99,110,65,1,29,-17,80,27,59,-12,87, 
  /* [23][1][][] */ 14,54,-62,32,82,-22,14,-78,43,76,78,-8,-19,-12,-6,53,-10,72,71,-59,-41,48,62,61,16,4,15,-9,33,35,34,-26, 27,56,84,44,46,32,-12,26,63,-15,-30,-45,68,-24,62,24,30,59,-8,-35,58,112,87,3,29,14,75,30,53,-35,58,-28, -22,72,19,-30,-10,-20,57,-8,-8,31,6,61,71,44,8,22,56,-38,3,-40,-57,-33,-4,-65,33,-31,90,77,14,43,-16,76, 
  /* [23][2][][] */ -37,-42,-36,-56,13,-99,58,59,-54,42,-27,-39,-70,57,-24,34,-90,26,18,-63,-51,56,37,58,-75,-34,27,-49,71,-57,-27,12, -50,36,48,53,-42,-76,-54,1,41,27,46,26,33,44,27,-9,-40,-20,-63,-34,-21,16,-52,-23,-21,42,36,-19,52,-50,92,68, 56,-26,30,18,7,-61,-16,-12,49,-60,35,-63,-69,-19,67,33,14,84,-77,67,40,-1,95,44,104,-29,61,35,-56,51,-5,95, 
  /* [24][0][][] */ -63,-51,12,67,-57,-82,-102,53,66,18,-37,45,-19,-41,84,-19,-96,-33,-17,-11,14,-83,-22,5,-10,9,-88,-25,70,-1,36,-13, -44,15,18,25,28,-105,-51,-49,-49,-85,-86,-19,4,-54,-26,47,18,33,-39,6,14,-87,-69,-52,-68,68,40,-55,60,32,14,-34, -62,31,-51,43,-60,-7,16,11,-60,-13,-33,-62,-14,41,45,-70,-7,53,-69,65,-59,16,10,36,-49,70,-13,-45,50,57,-29,-29, 
  /* [24][1][][] */ -40,19,79,63,-30,-89,-64,10,62,14,-37,43,-14,-26,42,-49,-64,44,52,17,57,-12,24,-54,31,-56,-33,17,67,84,-45,-51, -29,-37,47,76,42,29,-127,16,-18,-3,37,-3,29,71,4,-26,-34,-57,-10,34,-61,-22,-18,-81,-56,-52,-29,9,-49,-14,-64,63, 30,-21,72,38,-19,22,8,-39,-51,-79,-49,61,-51,3,31,-56,17,72,51,-19,47,-24,-56,-8,13,19,57,27,62,-20,-36,49, 
  /* [24][2][][] */ 1,-28,-7,-27,-18,44,-40,-21,45,-56,72,-14,24,59,55,21,14,46,-19,26,6,0,-76,48,-73,85,35,-53,78,-32,-16,63, -89,36,-43,59,-19,14,-74,22,-35,-93,78,37,47,29,8,-56,9,-44,-16,-19,61,-58,12,-72,32,27,-45,-35,-4,27,39,89, -96,31,40,-59,26,-14,-20,8,27,-20,36,-13,68,-3,-25,32,8,33,54,73,-60,-33,56,-28,-85,38,59,37,28,-43,6,42, 
  /* [25][0][][] */ 17,93,-74,-56,36,37,116,-68,22,122,9,14,-23,-42,70,-47,114,-45,105,-77,18,109,115,-19,42,3,59,50,-46,-79,-1,15, 40,91,14,-53,49,36,78,-8,-16,88,62,-46,-43,-64,-11,0,10,66,41,-27,16,39,115,73,19,-24,107,79,-13,29,45,95, 41,25,13,-3,90,13,121,-58,57,110,59,-16,-49,-63,11,3,21,21,98,-11,-4,109,14,8,8,40,85,20,-37,-26,35,6, 
  /* [25][1][][] */ 10,78,4,-5,37,53,80,-64,-36,88,66,-40,-31,-24,-54,36,30,-6,73,-40,-56,79,14,24,-12,-7,96,87,-73,-73,39,-24, 69,9,-6,41,-36,-4,109,26,-26,-7,9,77,-2,-7,-28,30,84,43,93,-25,-1,63,-7,51,66,29,68,71,11,-25,15,48, -1,83,53,40,12,-10,64,25,7,81,16,-3,61,34,-20,8,-12,48,-3,53,-50,38,6,73,37,-45,14,67,33,-32,77,-3, 
  /* [25][2][][] */ 111,98,30,-19,-36,3,108,65,35,58,53,-20,-57,-17,0,47,-49,73,30,3,-26,111,127,-11,52,-55,30,53,47,54,90,34, 35,78,34,-36,-56,-3,90,-26,51,20,20,73,-24,-35,-12,-21,-32,35,69,68,13,48,88,-33,-48,68,-31,86,-21,1,39,-7, 108,76,23,74,-9,-5,59,55,8,52,-79,42,28,51,67,31,-51,68,59,6,16,71,43,30,-7,-10,-47,45,76,80,16,47, 
  /* [26][0][][] */ -35,72,-41,-3,-66,87,32,-14,19,-48,19,7,-20,-52,-77,-31,75,-27,95,18,-19,46,-5,80,-12,-5,-6,13,-40,-63,-28,-58, 25,-54,17,-2,-83,67,-91,31,-68,-41,7,68,65,-52,-64,-7,68,-46,24,63,-61,14,-72,57,-43,45,26,49,-63,40,-29,35, -56,-81,48,-23,34,-41,-103,64,-55,17,68,-30,65,25,-42,70,43,-41,61,-61,-57,24,53,-61,-61,17,-63,-20,-24,75,-51,61, 
  /* [26][1][][] */ 82,37,-65,61,30,11,-7,-77,-36,-10,118,-12,66,-70,-74,-73,107,59,73,1,-7,-27,-48,9,5,1,27,-18,9,-32,80,85, 67,80,32,12,-14,85,22,-28,-5,-17,73,-19,-30,51,-40,-57,121,-33,16,62,58,55,-35,32,-25,-25,93,56,-58,-52,-3,60, -35,47,29,72,53,-37,72,11,-45,122,50,-33,41,-6,-66,49,17,-57,127,52,-7,-24,-59,-24,51,10,-13,24,73,-5,79,26, 
  /* [26][2][][] */ -24,51,20,-46,-8,91,119,13,61,9,-3,53,-69,-61,43,36,82,16,74,28,-3,81,77,-8,-47,46,26,107,-11,-38,12,-16, 97,52,-37,-58,-23,50,-10,11,-38,10,122,49,67,0,1,31,79,-49,105,-66,-24,6,-43,15,85,39,-7,109,-37,-69,72,-42, -33,-48,12,70,-46,16,-1,44,-61,63,69,-11,16,65,-24,4,15,-5,119,-18,-67,1,-58,71,-24,-23,-30,98,-17,9,-20,25, 
  /* [27][0][][] */ 35,-80,-16,-27,-84,4,-28,-36,24,-14,-78,-56,-51,-1,19,-30,-108,43,-39,53,-40,13,-55,3,-30,-54,10,-30,35,15,-2,17, 8,38,-45,-33,-74,-28,20,6,33,-41,-111,12,16,20,41,58,-91,-54,-85,69,22,4,12,-50,53,21,-4,2,45,-4,-24,-33, -2,13,-45,48,-35,-38,-2,-54,-11,16,-104,25,-1,-17,18,57,-52,35,-63,72,22,-28,56,-41,-24,38,-39,0,-28,46,36,38, 
  /* [27][1][][] */ 23,-78,-1,38,-32,-55,16,20,9,-28,-37,-50,65,43,-56,-52,-26,55,28,-25,58,-94,-29,-74,-35,33,-19,28,72,28,14,4, -44,3,41,-49,-85,-88,18,11,-5,-113,7,10,-39,39,-5,-56,0,19,-102,-54,51,-47,28,70,-88,-52,-43,-43,-6,-6,-57,-41, -39,-53,-22,70,-17,-94,-93,-27,-58,-24,-7,23,-43,63,79,45,-19,-44,-96,10,15,-63,-21,-10,-97,60,-67,-60,28,-56,44,19, 
  /* [27][2][][] */ -71,-106,45,86,-11,-76,-33,22,-65,-89,-113,-1,69,62,2,-40,-27,-25,9,66,51,-11,-54,-46,-87,81,-53,18,89,50,3,-77, -45,1,39,-53,-89,9,-127,79,-31,-41,-95,-7,-12,64,47,-77,-78,-75,-88,-20,-1,-12,-61,47,-22,36,-16,-122,61,66,40,38, -42,-90,0,60,16,-3,-74,18,21,-94,-15,8,42,83,-33,-21,2,-54,-104,42,33,-116,31,37,-22,-47,-33,-60,40,14,-64,33, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 28,3,3,32 } };
const TfArray<28, float> quant5_scale = { 28, { 0.0015286775305867195, 0.0014877403154969215, 0.0015006419271230698, 0.0014631384983658791, 0.0017606373876333237, 0.0012689587892964482, 0.0015960097080096602, 0.0013762819580733776, 0.0016069799894466996, 0.0015321070095524192, 0.0015196149470284581, 0.0015965906204655766, 0.0016604088013991714, 0.0012081492459401488, 0.0016509051201865077, 0.00087809719843789935, 0.0017224245239049196, 0.001377030392177403, 0.0016306701581925154, 0.001555850962176919, 0.0014334514271467924, 0.0015014581149443984, 0.001065577962435782, 0.00135409040376544, 0.0014929150929674506, 0.0017039204249158502, 0.0014763870276510715, 0.0015293414471670985, } };
const TfArray<28, int> quant5_zero = { 28, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[32] = { 10888, 17404, -6567, -14581, 15940, 21482, 22314, -12064, -179, 26080, 17970, -9793, 0, -11194, 1663, 6572, 14205, 3103, 18004, -13425, 0, 19981, 13103, 7899, 16870, -11813, 17634, 14059, -13264, -14061, 9552, 10756, };
const TfArray<1, int> tensor_dimension6 = { 1, { 32 } };
const TfArray<32, float> quant6_scale = { 32, { 5.6105482144630514e-06, 4.1155863073072396e-06, 5.2591049097827636e-06, 5.2729110393556766e-06, 4.6029554141568951e-06, 3.2749303500168025e-06, 4.469694886211073e-06, 5.1416677706583869e-06, 3.6709541291202186e-06, 3.3054375307983719e-06, 5.6342519201280084e-06, 4.5638348638021853e-06, 3.1853380733082304e-06, 5.6961157497426029e-06, 4.1557809709047433e-06, 4.8005108510551509e-06, 5.1970350796182174e-06, 4.6382556320168078e-06, 4.192559117655037e-06, 4.4136841097497381e-06, 3.1291622235585237e-06, 4.1784392124100123e-06, 4.9519262574904133e-06, 4.2966803448507562e-06, 4.0164145502785686e-06, 4.9621353355178144e-06, 3.977173037128523e-06, 5.4510096560989041e-06, 4.9953887355513871e-06, 4.1938774302252568e-06, 2.9185537187004229e-06, 3.5936982385464944e-06, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[32*3*3*1] = { 
  /* [0][0][][] */ -40, -127, -97, 
  /* [0][1][][] */ 68, -17, 24, 
  /* [0][2][][] */ 59, 31, 35, 
  /* [1][0][][] */ -127, -116, 12, 
  /* [1][1][][] */ 105, -89, 86, 
  /* [1][2][][] */ 52, -18, -9, 
  /* [2][0][][] */ 102, -40, -13, 
  /* [2][1][][] */ 84, 94, 127, 
  /* [2][2][][] */ 74, 36, -40, 
  /* [3][0][][] */ -51, 105, 101, 
  /* [3][1][][] */ 20, 127, 76, 
  /* [3][2][][] */ 70, 126, 97, 
  /* [4][0][][] */ 127, -43, 4, 
  /* [4][1][][] */ 63, -69, -53, 
  /* [4][2][][] */ -107, 60, -77, 
  /* [5][0][][] */ -14, 122, 38, 
  /* [5][1][][] */ 22, -127, -48, 
  /* [5][2][][] */ -32, -120, 34, 
  /* [6][0][][] */ 53, -43, -127, 
  /* [6][1][][] */ -68, -62, -47, 
  /* [6][2][][] */ -4, 74, 99, 
  /* [7][0][][] */ 102, 107, 6, 
  /* [7][1][][] */ 98, 32, 11, 
  /* [7][2][][] */ 104, 127, 94, 
  /* [8][0][][] */ 74, -31, -45, 
  /* [8][1][][] */ -103, -46, -12, 
  /* [8][2][][] */ -5, -127, -61, 
  /* [9][0][][] */ -104, 127, 2, 
  /* [9][1][][] */ -115, -90, -100, 
  /* [9][2][][] */ -50, 69, 117, 
  /* [10][0][][] */ 127, -40, 54, 
  /* [10][1][][] */ -83, -59, 1, 
  /* [10][2][][] */ -72, -91, 56, 
  /* [11][0][][] */ 18, -23, -69, 
  /* [11][1][][] */ 66, 69, 116, 
  /* [11][2][][] */ 127, 82, 81, 
  /* [12][0][][] */ -72, 25, -11, 
  /* [12][1][][] */ 97, -100, -127, 
  /* [12][2][][] */ -46, -50, -57, 
  /* [13][0][][] */ 57, 51, 94, 
  /* [13][1][][] */ 92, 66, 25, 
  /* [13][2][][] */ -39, 127, 13, 
  /* [14][0][][] */ 110, -48, -127, 
  /* [14][1][][] */ -45, 100, 54, 
  /* [14][2][][] */ 5, -43, -96, 
  /* [15][0][][] */ -38, -2, -81, 
  /* [15][1][][] */ -127, 81, 24, 
  /* [15][2][][] */ -38, 79, 96, 
  /* [16][0][][] */ 28, 88, 57, 
  /* [16][1][][] */ -103, -41, 24, 
  /* [16][2][][] */ -32, -127, 20, 
  /* [17][0][][] */ -62, -127, -62, 
  /* [17][1][][] */ 99, 109, 41, 
  /* [17][2][][] */ -82, 29, 46, 
  /* [18][0][][] */ -127, 50, 66, 
  /* [18][1][][] */ -93, 81, 8, 
  /* [18][2][][] */ -114, -97, 126, 
  /* [19][0][][] */ 20, 123, 12, 
  /* [19][1][][] */ 60, 73, 105, 
  /* [19][2][][] */ 127, 85, 79, 
  /* [20][0][][] */ -22, 2, -127, 
  /* [20][1][][] */ -38, -94, -127, 
  /* [20][2][][] */ -37, -100, 78, 
  /* [21][0][][] */ -56, -111, -76, 
  /* [21][1][][] */ -55, -4, 127, 
  /* [21][2][][] */ 40, -96, 119, 
  /* [22][0][][] */ -40, -85, -82, 
  /* [22][1][][] */ 10, 16, -5, 
  /* [22][2][][] */ 127, 28, -45, 
  /* [23][0][][] */ 81, -65, 127, 
  /* [23][1][][] */ -32, -30, -82, 
  /* [23][2][][] */ 9, -19, 19, 
  /* [24][0][][] */ 51, -52, -90, 
  /* [24][1][][] */ 58, -127, 82, 
  /* [24][2][][] */ -82, 78, -17, 
  /* [25][0][][] */ 109, 123, -24, 
  /* [25][1][][] */ 65, 127, 54, 
  /* [25][2][][] */ -7, -76, 83, 
  /* [26][0][][] */ -32, 70, -110, 
  /* [26][1][][] */ 96, 59, 13, 
  /* [26][2][][] */ -127, 22, -92, 
  /* [27][0][][] */ -127, -26, -93, 
  /* [27][1][][] */ -24, 15, 89, 
  /* [27][2][][] */ -64, 81, 68, 
  /* [28][0][][] */ 127, 112, 88, 
  /* [28][1][][] */ 125, -31, 24, 
  /* [28][2][][] */ 79, 68, -28, 
  /* [29][0][][] */ 78, 38, 126, 
  /* [29][1][][] */ 40, 127, -98, 
  /* [29][2][][] */ 66, 120, 28, 
  /* [30][0][][] */ 22, -127, 11, 
  /* [30][1][][] */ -61, -8, 73, 
  /* [30][2][][] */ 39, -120, 108, 
  /* [31][0][][] */ 76, 105, -121, 
  /* [31][1][][] */ 54, -13, -39, 
  /* [31][2][][] */ 100, -101, -127, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,3,3,1 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0015812974888831377, 0.0011599520221352577, 0.0014822455123066902, 0.0014861365780234337, 0.0012973138364031911, 0.00092301837867125869, 0.0012597552267834544, 0.0014491465408354998, 0.00103463523555547, 0.00093161663971841335, 0.00158797821495682, 0.0012862880248576403, 0.00089776737149804831, 0.0016054142033681273, 0.0011712806299328804, 0.0013529936550185084, 0.0014647514326497912, 0.0013072630390524864, 0.0011816462501883507, 0.0012439689598977566, 0.0008819345966912806, 0.0011776667088270187, 0.0013956690672785044, 0.0012109922245144844, 0.0011320010526105762, 0.0013985465047881007, 0.0011209410149604082, 0.0015363326529040933, 0.0014079187531024218, 0.0011820178478956223, 0.00082257593749091029, 0.0010128611465916038, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,28,28,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0024418830871582031, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,14,14,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0024418830871582031, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,14,14,28 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0065900585614144802, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,7,7,28 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0065900585614144802, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,1372 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0065900585614144802, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,5 } };
const TfArray<1, float> quant13_scale = { 1, { 0.060278628021478653, } };
const TfArray<1, int> quant13_zero = { 1, { 38 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,5 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,7,6 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,5,4 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,3,2 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension0, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 6860, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8064, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension9, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5488, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5488, (TfLiteIntArray*)&tensor_dimension11, 1372, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1372, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1376, (TfLiteIntArray*)&tensor_dimension13, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 15;
  for (size_t i = 0; i < 15; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 7; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
